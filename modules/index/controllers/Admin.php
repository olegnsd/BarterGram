<?phpnamespace dvijok\modules\index;class Admin extends \dvijok\core\Core {	public $user;	public $data;	public $path;	public $settings;	public function __construct($path, $data) {				parent::__construct($path, $data);		$settings = $this->db->query("SELECT * FROM `settings`")->fetchAll();		$s2 = array();		foreach($settings as $s)		{			$s2[$s['name']] = $s['value'];		}		$this->settings = $s2;		if(!$this->settings['site_enabled'] && $path['function'] != 'site_closed')		{			//return $this->redirect('/site_closed'); 					}		$this->data = $data;		$this->path = $path;		$this->current_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";		$this->relative_url = $_SERVER['REQUEST_URI'];		\dvijok\core\Config::$current_url = $this->current_url;		\dvijok\core\Config::$relative_url = $this->relative_url;		if($this->session->has('user_id'))		{			$temp = array();			$temp[] = $this->session->get('user_id');			$this->user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();		}		if($this->user['type'] != 2 && $path['function'] != 'login')		{			return $this->redirect('/admin/login');		}	}		public function arbitrary_post() {			$post = $this->input->post();		$article_id = intval($post['article_id']);		$temp = array();		$temp[] = $article_id;		$offer = $this->db->query("SELECT * FROM `offers` WHERE `article_id` = ? AND `status` = 1 AND `agree` = 1", $temp)->fetch();		$temp = array();		$temp[] = $article_id;		$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		if(isset($post['payout']))		{			$temp = array();			$temp[] = $article_id;			$reservation = $this->db->query("SELECT * FROM `payments` WHERE `article_id` = ? AND `type` = 'reservation'", $temp)->fetch();			$temp = array();			$temp[] = $reservation['amount'];			$temp[] = $offer['id'];			$temp[] = $offer['article_id'];			$temp[] = $offer['user_id'];			$temp[] = 'payment';			$this->db->query("INSERT INTO `payments`(`amount`, `offer_id`, `article_id`, `user_id`, `type`) VALUES(?, ?, ?, ?, ?)", $temp);			$temp = array();			$temp[] = $article_id;			$this->db->query("UPDATE `articles` SET `payed` = 1, `arbitrary` = 1 WHERE `id` = ?", $temp);			$offer_id = $offer['id'];		$temp = array();		$temp[] = $reservation['user_id'];		$temp[] = $offer['user_id'];		$temp[] = $reservation['user_id'];		$temp[] = $offer['user_id'];		$temp[] = $offer_id;		$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();				if($m)		{			$conversation_id = $m['id'];			$offer_id = $m['offer_id'];		}		else		{			$temp = array();			$temp[] = $offer['user_id'];			$temp[] = $reservation['user_id'];			$temp[] = $offer_id;			$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);			$conversation_id = $this->db->insertId();		}			$temp = array();			$temp[] = $reservation['user_id'];			$temp[] = $offer['user_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong>							<p>Сумма: <strong>'.$reservation['amount'].' '.\dvijok\core\Config::$currencies[$article['currency']].'</strong> выплачена исполнителю</p>							';			$temp[] = '<strong>Системное сообщение: </strong>							<p>Сумма: <strong>'.$reservation['amount'].' '.\dvijok\core\Config::$currencies[$article['currency']].'</strong> выплачена исполнителю</p>							';			$temp[] = $offer_id;			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `back_message`, `message`, `offer_id`, `is_system`) VALUES(?, ?, ?, ?, ?, ?, 1)", $temp);									$this->session->setFlash('message', 'Арбитраж решён в пользу исполнителя');		}		if(isset($post['denie_payout']))		{			$temp = array();			$temp[] = $article_id;			$reservation = $this->db->query("SELECT * FROM `payments` WHERE `article_id` = ? AND `type` = 'reservation'", $temp)->fetch();			$temp = array();			$temp[] = $reservation['amount'];			$temp[] = $offer['id'];			$temp[] = $offer['article_id'];			$temp[] = $this->user['id'];			$temp[] = 'back_pay';			$this->db->query("INSERT INTO `payments`(`amount`, `offer_id`, `article_id`, `user_id`, `type`) VALUES(?, ?, ?, ?, ?)", $temp);						$temp = array();			$temp[] = $article_id;			$this->db->query("UPDATE `articles` SET `payed` = -1, `arbitrary` = 1 WHERE `id` = ?", $temp);			$offer_id = $offer['id'];		$temp = array();		$temp[] = $reservation['user_id'];		$temp[] = $offer['user_id'];		$temp[] = $reservation['user_id'];		$temp[] = $offer['user_id'];		$temp[] = $offer_id;		$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();				if($m)		{			$conversation_id = $m['id'];			$offer_id = $m['offer_id'];		}		else		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $article['user_id'];			$temp[] = $offer_id;			$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);			$conversation_id = $this->db->insertId();		}			$temp = array();			$temp[] = $reservation['user_id'];			$temp[] = $offer['user_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong>							<p>Сумма: <strong>'.$reservation['amount'].' '.\dvijok\core\Config::$currencies[$article['currency']].'</strong> возвращена заказчику</p>							';			$temp[] = '<strong>Системное сообщение: </strong>							<p>Сумма: <strong>'.$reservation['amount'].' '.\dvijok\core\Config::$currencies[$article['currency']].'</strong> возвращена заказчику</p>							';			$temp[] = $offer_id;			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `back_message`, `message`, `offer_id`, `is_system`) VALUES(?, ?, ?, ?, ?, ?, 1)", $temp);		$this->session->setFlash('message', 'Арбитраж решён в пользу заказчика');		}		return $this->redirectBack();	}		public function o_nas() {				if($_SERVER['REQUEST_METHOD'] === 'POST')		{			$id = $this->input->post("id");			$id = intval($id);			$title = $this->input->post("title");			$title = strip_tags($title);			$content = $this->input->post("content");			$this->db->query("UPDATE `post` SET `title` = '".$title."', `content` = '".$content."'");			$this->session->setFlash('message', 'Успешно отредактировано');			return $this->redirectBack();		}		else		{			$data = [];			$data['little_about_us'] = $this->db->query("SELECT * FROM `post` WHERE `type` = 'little-about-us'")->fetch();			return $this->view(__FUNCTION__, $data);		}			}		public function login() {				$data = array();		return $this->view(__FUNCTION__, $data);	}		public function login_post() {				$post = $this->input->post();		$validation = $this->validator->check($post, array(					'login' => 'required|exists:users,login',			'password' => 'required|verify:users,password,login'		), array(					'login' => array(							'required' => 'Укажите логин',				'exists' => 'Такого логина не существует'			),			'password' => array(							'required' => 'Укажите пароль',				'verify' => 'Неверный пароль'			)		));		if($validation)		{			$temp = array();			$temp[] = $post['login'];			$user = $this->db->query("SELECT * FROM `users` WHERE `login` = ?", $temp)->fetch();			if($user['type'] == 2)			{				$this->session->set('user_id', $user['id']);			}			if(isset($post['show_auth']))			{				$this->redirectBack();							}			else			{				$this->redirect('/admin');			}		}		else		{			//print_r($post['redirectTo']);			//exit;			//if($post['redirectTo'])			//{				//$this->redirectBack();							//}			//else			//{			//	$this->redirect($post['redirectTo']);			//}			if(isset($post['show_auth']))			{				$this->session->setFlash('show_auth', 1);				$this->redirectBack();							}			else			{				$this->redirectBack();			}		}			}		public function logout() {				$this->session->remove('user_id');		$this->session->remove('admin');		return $this->redirect('/admin/login');					}		public function header(){	    	    return $this->view(__FUNCTION__);	}	public function index() {		/*        $ip = $_SERVER["REMOTE_ADDR"];        $row = $this->db->query("SELECT * FROM `experience` WHERE `ip` = '".$ip."'");        $d = $row->fetch();       // echo "<pre>";     //   print_r($row);      //  echo "</pre>";      // exit;        $data = [];        if($row->result->num_rows == 0){        $data["r"] = random_int(1, 20);        $this->db->query("INSERT INTO `experience` (`amount`, `ip`, `name`) VALUES(".$data["r"].", '".$_SERVER["REMOTE_ADDR"]."', '')");        }        else{                                    $data["r"] = $d["amount"];        }        $data["heroes"] = $this->db->query("SELECT * FROM `experience` ORDER BY `id` DESC LIMIT 100")->fetchAll();        $exp = $this->db->query("SELECT SUM(`amount`) AS `exp`, `id`, `name` FROM `experience`");                $row2 = $exp->fetch();        $data["level"] = intdiv($row2["exp"], 100) + 1;        $data["left"] = $row2["exp"] % 100;        $data["id"] = $d["id"];        $data["name"] = $d["name"];        $data["fraction"] = $d["fraction"];		return $this->view(__FUNCTION__, $data);		        $query = $this->db->query("SELECT * FROM `menu`");                $menus = $query->fetchAll();		$menus = \dvijok\core\Helper::buildTreeHTML($menus);		$data = [];		$data['menus'] = $menus;		*/		$data = [];		return $this->view(__FUNCTION__, $data);	}		public function leftmenu($id = 0, $id2 = 0) {				if($_SERVER['REQUEST_METHOD'] === 'POST')		{			$id = $this->input->post("id");			$id = intval($id);			$title = $this->input->post("title");			$title = strip_tags($title);			$title = \dvijok\core\Helper::clean($title);			$content = $this->input->post("content");						$url = $this->input->post("url");			$url = strip_tags($url);			$parent_id = $this->input->post("parent_id");			$parent_id = intval($parent_id);			if($url && !\dvijok\core\Helper::http_check($url))			{				$url = 'http://'. $url;			}						if($id)			{					$query = $this->db->query("SELECT * FROM `leftmenu` WHERE `title` = '".$title."' AND `id` != ".$id);					$row = $query->fetch();					if(!$row)					{						$this->db->query("UPDATE `leftmenu` SET `title` = '".$title."', `content` = '".$content."', `url` = '".$url."', `parent_id` = ".$parent_id." WHERE `id` = ".$id);						$this->session->setFlash('message', 'Меню отредактироавано успешно');					}					else					{						$this->session->setFlash('error', 'Такое название уже есть');					}			}			else			{					$query = $this->db->query("SELECT * FROM `leftmenu` WHERE `title` = '".$title."'");					$row = $query->fetch();										if(!$row)					{												$this->db->query("INSERT INTO `leftmenu` (`title`, `content`, `url`, `parent_id`) VALUES('".$title."', '".$content."' ,'".$url."', ".$parent_id.")");						$this->session->setFlash('message', 'Меню добавлено успешно');					}					else					{												$this->session->setFlash('error', 'Такое название уже есть');					}			}											return $this->redirectBack();		}		elseif($id > 0)		{			$id = intval($id);			$query = $this->db->query("SELECT * FROM `leftmenu`");						$menus = $query->fetchAll();			$query = $this->db->query("SELECT * FROM `leftmenu` WHERE id = ".$id);			$menu = $query->fetch();			$data['menu'] = $menu;			$data['menus'] = $menus;			return $this->view('menu_edit', $data);					}		elseif($id === 'delete')		{			$id2 = intval($id2);			$this->db->query("DELETE FROM `leftmenu` WHERE `id` = ".$id2);			$this->session->setFlash('message', 'Меню удалено успешно');			return $this->redirectBack();											}		elseif($id === 'add')		{						$id = intval($id);			$query = $this->db->query("SELECT * FROM `leftmenu`");						$menus = $query->fetchAll();			$data['menus'] = $menus;			return $this->view('menu_add', $data);								}		else		{						$query = $this->db->query("SELECT * FROM `leftmenu`");						$menus = $query->fetchAll();			$menus = \dvijok\core\Helper::buildTreeHTMLAdmin($menus, 0, 1, 'leftmenu');			$data = [];			$data['menus'] = $menus;			return $this->view(__FUNCTION__, $data);		}	}		public function news($id = 0, $id2 = 0) {				if($_SERVER['REQUEST_METHOD'] === 'POST')		{			$id = $this->input->post("id");			$id = intval($id);			$title = $this->input->post("title");			$title = strip_tags($title);			$title = \dvijok\core\Helper::clean($title);			$content = $this->input->post("content");						if($url && !\dvijok\core\Helper::http_check($url))			{				$url = 'http://'. $url;			}						if($id)			{					$query = $this->db->query("SELECT * FROM `news` WHERE `title` = '".$title."' AND `id` != ".$id);					$row = $query->fetch();					if(!$row)					{						$this->db->query("UPDATE `news` SET `title` = '".$title."', `content` = '".$content."' WHERE `id` = ".$id);						$this->session->setFlash('message', 'Новость отредактироавано успешно');					}					else					{						$this->session->setFlash('error', 'Такое название уже есть');					}			}			else			{					$query = $this->db->query("SELECT * FROM `news` WHERE `title` = '".$title."'");					$row = $query->fetch();										if(!$row)					{												$this->db->query("INSERT INTO `news` (`title`, `content`) VALUES('".$title."', '".$content."')");						$this->session->setFlash('message', 'Новость добавлена успешно');					}					else					{												$this->session->setFlash('error', 'Такое название уже есть');					}			}											return $this->redirectBack();		}		elseif( $id > 0)		{			$id = intval($id);			$query = $this->db->query("SELECT * FROM `news`");						$menus = $query->fetchAll();			$query = $this->db->query("SELECT * FROM `news` WHERE id = ".$id);			$news = $query->fetch();			$data['news'] = $news;			$data['menus'] = $menus;			return $this->view('news_edit', $data);					}		elseif($id === 'delete')		{			$id2 = intval($id2);			$this->db->query("DELETE FROM `news` WHERE `id` = ".$id2);			$this->session->setFlash('message', 'Меню удалено успешно');			return $this->redirectBack();											}		elseif($id === 'add')		{						$id = intval($id);			$query = $this->db->query("SELECT * FROM `news`");						$menus = $query->fetchAll();			$data['menus'] = $menus;			return $this->view('news_add', $data);								}		else		{						$query = $this->db->query("SELECT * FROM `news`");						$news = $query->fetchAll();			//$news = \dvijok\core\Helper::buildTreeHTMLAdmin($news);			$data = [];			$data['news'] = $news;			return $this->view(__FUNCTION__, $data);		}	}		public function slider($id = 0, $id2 = 0) {						if($_SERVER['REQUEST_METHOD'] === 'POST')		{						$id = $this->input->post("id");			$id = intval($id);			$title = $this->input->post("title");			$title = strip_tags($title);			$title = \dvijok\core\Helper::clean($title);			$content = $this->input->post("content");						$url = $this->input->post("url");			$url = strip_tags($url);			$parent_id = $this->input->post("parent_id");			$parent_id = intval($parent_id);			if($url && !\dvijok\core\Helper::http_check($url))			{				$url = 'http://'. $url;			}						if($id2)			{				$post = $this->input->post();									$temp = array();					$temp[] = $url;					if(isset($post['new']))					{						$temp[] = 1;					}					else					{						$temp[] = 0;					}					$temp[] = $id2;					$this->db->query("UPDATE `slider` SET `url` = ?, `new` = ? WHERE `id` = ?", $temp);					$id = $this->db->insertId();					$this->session->setFlash('message','слайдер успешно отредактирован');					$temp = array();					if($_FILES['img']['size'][0] > 0)					{						//$this->session->setFlash('message', 'Добавьте изображение');						//return $this->redirectBack();						$paths = \dvijok\core\Helper::uploadMultiple($_FILES, "./assets/uploads/slider/$id2/", 'img');						$temp[] = $paths[0];					}					elseif($post['url_img'] != '')					{						$temp[] = $post['url_img'];					}										if(isset($temp[0]))					{						$temp[] = $id2;						$this->db->query("UPDATE `slider` SET `img` = ? WHERE `id` = ?", $temp);					}					$this->redirect('/admin/slider/edit/'.$id2);			}			else			{				$post = $this->input->post();									$temp = array();					$temp[] = $url;					if(isset($post['new']))					{						$temp[] = 1;					}					else					{						$temp[] = 0;					}					$this->db->query("INSERT INTO `slider` (`url`, `new`) VALUES(?, ?)", $temp);					$id = $this->db->insertId();					$this->session->setFlash('message','слайдер успешно добавлен');					$temp = array();					if($_FILES['img']['size'][0] > 0)					{						//$this->session->setFlash('message', 'Добавьте изображение');						//return $this->redirectBack();						$paths = \dvijok\core\Helper::uploadMultiple($_FILES, "./assets/uploads/slider/$id/", 'img');						$temp[] = $paths[0];					}					else					{						$temp[] = $post['url_img'];					}					$temp[] = $id;					$this->db->query("UPDATE `slider` SET `img` = ? WHERE `id` = ?", $temp);					$this->redirect('/admin/slider/edit/'.$id);			}											return $this->redirectBack();		}		elseif($id === 'category')		{			$data = array();			$category_id = intval($this->input->get('category_id'));			$sort = $this->input->get('sort');			if($category_id !== false)			{				$temp = array();								$sortQuery = '';				$whereQuery = '';				if($category_id)				{					$whereQuery = ' WHERE `category_id` = ?';					$temp[] = $category_id;									}				if($s = $this->input->get('s'))				{					if($whereQuery)					{						$whereQuery .= ' AND `title` LIKE ?';					}					else					{						$whereQuery = ' WHERE `title` LIKE ?';					}					$temp[] = '%'.$s.'%';										}				if(!$sort)				{					$sort = 'ASC';				}					$sortQuery = ' ORDER BY `created_at` '.$sort;																	$data['slider'] = $this->db->query("SELECT * FROM `slider`".$whereQuery.$sortQuery, $temp)->fetchAll();			}			else			{				return $this->redirect('/admin/slider');			}			$data['slider'] = $this->db->query("SELECT * FROM `slider`")->fetchAll();			$data['slider_id'] = $category_id;			$data['sort'] = $sort;			return $this->view(__FUNCTION__, $data);		}		elseif($id === 'edit' && $id2)		{			$id2 = intval($id2);			$data['slider'] = $this->db->query("SELECT * FROM `slider` WHERE id = ".$id2)->fetch();			return $this->view('slider_edit', $data);					}		elseif($id === 'delete')		{			$id2 = intval($id2);			$this->db->query("DELETE FROM `slider` WHERE `id` = ".$id2);			$this->session->setFlash('message', 'Слайдер успешно удалён');			return $this->redirectBack();											}		elseif($id === 'add')		{						$id = intval($id);			$data['slider'] = $this->db->query("SELECT * FROM `slider`")->fetchAll();			return $this->view('slider_add', $data);								}		else		{			$data = [];			$sortQuery = '';			if($sort = $this->input->get('sort'))			{				$sortQuery = ' ORDER BY `created_at` '.$sort;			}			$data['articles'] = $this->db->query("SELECT * FROM `slider`".$sortQuery)->fetchAll();			$data['slider'] = $this->db->query("SELECT * FROM `slider`")->fetchAll();			return $this->view(__FUNCTION__, $data);		}	}		public function articles($id = 0, $id2 = 0) {						if($_SERVER['REQUEST_METHOD'] === 'POST')		{						$id = $this->input->post("id");			$id = intval($id);			$title = $this->input->post("title");			$title = strip_tags($title);			$title = \dvijok\core\Helper::clean($title);			$content = $this->input->post("content");						$url = $this->input->post("url");			$url = strip_tags($url);			$parent_id = $this->input->post("parent_id");			$parent_id = intval($parent_id);			if($url && !\dvijok\core\Helper::http_check($url))			{				$url = 'http://'. $url;			}						if($id2)			{				$post = $this->input->post();								$validation = $this->validator->check($post, array(									'title' => 'required|minlength:3|maxlength:255',					'description' => 'required|minlength:50|maxlength: 1500',					'category_id' => 'required|integer',					'type' => 'required|in_values:s,p',					'pay_type' => 'required|integer',					'price' => 'required|number',					'currency' => 'required|integer',					'article_id' => 'required|integer'				), array(									'title' => array(											'required' => 'Укажите название',						'minlength' => 'Название слишком короткое (минимум 3 символа)',						'maxlength' => 'Название слишком длинное (максимум 255 символа)',					),					'description' => array(											'required' => 'Укажите описание',						'minlength' => 'Описание слишком короткое (минимум 50 символов)',						'maxlength' => 'Описание слишком длинное (максимум 1500 символа)',					),					'category_id' => array(											'required' => 'Укажите категорию',						'integer' => 'Неверное значение для категории'					),					'type' => array(											'required' => 'Укажите тип обьявления',						'in_values' => 'Неверное значение для тип обьявления'					),					'pay_type' => array(											'required' => 'Укажите тип оплаты',						'integer' => 'Неверное значение для тип оплаты'					),					'price' => array(											'required' => 'Повторите пароль',						'number' => 'Цена должна быть числовым значением'					),					'currency' => array(											'required' => 'Укажите валюту',						'integer' => 'Валюта значение для категории'					)				));								if($validation && $this->user)				{					$temp = array();					$temp[] = $post['title'];					$temp[] = $post['description'];										$temp[] = $post['category_id'];					$temp[] = $post['type'];					$temp[] = $post['pay_type'];					$temp[] = $post['price'];					$temp[] = $post['currency'];					$id = intval($post['article_id']);					$temp[] = $id;					$this->db->query("UPDATE `articles` SET `title` = ?, `description` = ?, `category_id` = ?, `type` = ?, `pay_type` = ?, `price` = ?, `currency` = ? WHERE `id` = ?", $temp);										\dvijok\core\Helper::uploadMultiple($_FILES, "./assets/uploads/articles/$id/", 'files');					$this->session->setFlash('message','Обьявление успешно отредактировано');					$name = \dvijok\core\Helper::transliterate($post['title'].'-'.$id);										return $this->redirect('/admin/articles/edit/'.$id);				}				else				{					print_r($this->session->get('errors'));					exit;					$this->redirectBack();				}			}			else			{				$post = $this->input->post();				$validation = $this->validator->check($post, array(									'title' => 'required|minlength:3|maxlength:255',					'description' => 'required|minlength:50|maxlength: 1500',					'category_id' => 'required|integer',					'type' => 'required|in_values:s,p',					'pay_type' => 'required|integer',					'price' => 'required|number',					'currency' => 'required|integer'				), array(									'title' => array(											'required' => 'Укажите название',						'minlength' => 'Название слишком короткое (минимум 3 символа)',						'maxlength' => 'Название слишком длинное (максимум 255 символа)',					),					'description' => array(											'required' => 'Укажите описание',						'minlength' => 'Описание слишком короткое (минимум 50 символов)',						'maxlength' => 'Описание слишком длинное (максимум 1500 символа)',					),					'category_id' => array(											'required' => 'Укажите категорию',						'integer' => 'Неверное значение для категории'					),					'type' => array(											'required' => 'Укажите тип обьявления',						'in_values' => 'Неверное значение для тип обьявления'					),					'pay_type' => array(											'required' => 'Укажите тип оплаты',						'integer' => 'Неверное значение для тип оплаты'					),					'price' => array(											'required' => 'Повторите пароль',						'number' => 'Цена должна быть числовым значением'					),					'currency' => array(											'required' => 'Укажите валюту',						'integer' => 'Валюта значение для категории'					),					'oferta' => array(											'required' => 'Необходимо принять оферту',						'equals' => 'Неверное значение принятие оферты'					)				));				if($validation && $this->user)				{					$temp = array();					$temp[] = $post['title'];					$temp[] = $post['description'];					$temp[] = $this->user['id'];					$temp[] = $post['category_id'];					$temp[] = $post['type'];					$temp[] = $post['pay_type'];					$temp[] = $post['price'];					$temp[] = $post['currency'];					$this->db->query("INSERT INTO `articles` (`title`, `description`, `user_id`, `category_id`, `type`, `pay_type`, `price`, `currency`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", $temp);					$id = $this->db->insertId();					$this->session->setFlash('message','Обьявление успешно добавлено');					\dvijok\core\Helper::uploadMultiple($_FILES, "./assets/uploads/articles/$id/", 'files');					$name = \dvijok\core\Helper::transliterate($post['title'].'-'.$id);					$this->redirect('/admin/articles/edit/'.$id);				}				else				{					return $this->redirectBack();				}			}											return $this->redirectBack();		}		elseif($id === 'category')		{			$data = array();			$category_id = intval($this->input->get('category_id'));			$sort = $this->input->get('sort');			if($category_id !== false)			{				$temp = array();								$sortQuery = '';				$whereQuery = '';				if($category_id)				{					$whereQuery = ' WHERE `category_id` = ?';					$temp[] = $category_id;									}				if($s = $this->input->get('s'))				{					if($whereQuery)					{						$whereQuery .= ' AND `title` LIKE ?';					}					else					{						$whereQuery = ' WHERE `title` LIKE ?';					}					$temp[] = '%'.$s.'%';										}				if(!$sort)				{					$sort = 'ASC';				}					$sortQuery = ' ORDER BY `created_at` '.$sort;																	$data['articles'] = $this->db->query("SELECT *, (SELECT `id` FROM `offers` WHERE `offers`.`article_id` = `articles`.`id` AND `status` = 1 AND `agree` = 1 AND `result` != 0) AS `offer_id2`,(SELECT `conversation_id` FROM `offers_conversations` WHERE `offers_conversations`.`offer_id` = `offer_id2` ORDER BY `id` DESC LIMIT 1) AS `conversation_id` ,(SELECT `type` FROM `payments` WHERE `payments`.`article_id` = `articles`.`id` AND `payments`.`type` = 'reservation') AS `status` FROM `articles`".$whereQuery.$sortQuery, $temp)->fetchAll();			}			else			{				return $this->redirect('/admin/articles');			}			$data['categories'] = $this->db->query("SELECT * FROM `categories`")->fetchAll();			$data['category_id'] = $category_id;			$data['sort'] = $sort;			return $this->view(__FUNCTION__, $data);		}		elseif($id === 'edit' && $id2)		{			$id2 = intval($id2);			$data['categories'] = $this->db->query("SELECT * FROM `categories`")->fetchAll();			$data['article'] = $this->db->query("SELECT *,(SELECT `result` FROM `offers` WHERE `offers`.`article_id` = `articles`.`id` AND `result` != 0) AS `status` FROM `articles` WHERE `id` = ".$id2)->fetch();			$path = './assets/uploads/articles/'.$id2.'/';			$data['files'] = \dvijok\core\Helper::getFiles($path);			return $this->view('articles_edit', $data);					}		elseif($id === 'delete')		{			$id2 = intval($id2);			$this->db->query("DELETE FROM `articles` WHERE `id` = ".$id2);			$this->session->setFlash('message', 'Обьявление успешно удалено');			return $this->redirectBack();											}		elseif($id === 'add')		{						$id = intval($id);			$data['categories'] = $this->db->query("SELECT * FROM `categories`")->fetchAll();			return $this->view('articles_add', $data);								}		else		{			$data = [];			$sortQuery = '';			if($sort = $this->input->get('sort'))			{				$sortQuery = ' ORDER BY `created_at` '.$sort;			}			$data['articles'] = $this->db->query("SELECT *, (SELECT `id` FROM `offers` WHERE `offers`.`article_id` = `articles`.`id` AND `status` = 1 AND `agree` = 1) AS `offer_id2`,(SELECT `conversation_id` FROM `offers_conversations` WHERE `offers_conversations`.`offer_id` = `offer_id2` ORDER BY `id` DESC LIMIT 1) AS `conversation_id` ,(SELECT `type` FROM `payments` WHERE `payments`.`article_id` = `articles`.`id` AND `payments`.`type` = 'reservation') AS `status` FROM `articles`".$sortQuery)->fetchAll();			$data['categories'] = $this->db->query("SELECT * FROM `categories`")->fetchAll();			return $this->view(__FUNCTION__, $data);		}	}		public function oferta() {				$data= array();		$data['oferta'] = $this->db->query("SELECT * FROM `pages` WHERE `type` = 'oferta'")->fetch();		return $this->view(__FUNCTION__, $data);			}		public function oferta_post() {						$post = $this->input->post();				$validation = $this->validator->check($post, array(									'title' => 'required|minlength:3|maxlength:255',					'description' => 'required|minlength:50|maxlength: 10000',					'page_id' => 'required|integer',				), array(									'title' => array(											'required' => 'Укажите логин',						'minlength' => 'Название слишком короткое (минимум 3 символа)',						'maxlength' => 'Название слишком длинное (максимум 255 символа)',					),					'description' => array(											'required' => 'Укажите E-mail',						'minlength' => 'Описание слишком короткое (минимум 50 символов)',						'maxlength' => 'Описание слишком длинное (максимум 1500 символа)',					),					'page_id' => array(											'required' => 'Укажите ID страницы',						'integer' => 'Неверное значение для ID страницы'					)				));				if($validation && $this->user)				{					$temp = array();					$temp[] = $post['title'];					$temp[] = $post['description'];					$temp[] = $post['page_id'];					$this->db->query("UPDATE `pages` SET `title` = ?, `description` = ? WHERE `id` = ?", $temp);					$this->session->setFlash('message','Оферта успешно отредактирована');					$this->redirectBack();				}				else				{					return $this->redirectBack();				}			}		public function rules() {				$data= array();		$data['rules'] = $this->db->query("SELECT * FROM `pages` WHERE `type` = 'rules'")->fetch();		return $this->view(__FUNCTION__, $data);			}		public function rules_post() {						$post = $this->input->post();				$validation = $this->validator->check($post, array(									'title' => 'required|minlength:3|maxlength:255',					'description' => 'required|minlength:50|maxlength: 10000',					'page_id' => 'required|integer',				), array(									'title' => array(											'required' => 'Укажите логин',						'minlength' => 'Название слишком короткое (минимум 3 символа)',						'maxlength' => 'Название слишком длинное (максимум 255 символа)',					),					'description' => array(											'required' => 'Укажите E-mail',						'minlength' => 'Описание слишком короткое (минимум 50 символов)',						'maxlength' => 'Описание слишком длинное (максимум 1500 символа)',					),					'page_id' => array(											'required' => 'Укажите ID страницы',						'integer' => 'Неверное значение для ID страницы'					)				));				if($validation && $this->user)				{					$temp = array();					$temp[] = $post['title'];					$temp[] = $post['description'];					$temp[] = $post['page_id'];					$this->db->query("UPDATE `pages` SET `title` = ?, `description` = ? WHERE `id` = ?", $temp);					$this->session->setFlash('message','Оферта успешно отредактирована');					$this->redirectBack();				}				else				{					return $this->redirectBack();				}			}	public function users($id = 0, $id2 = 0) {						if($_SERVER['REQUEST_METHOD'] === 'POST')		{			if($id2)			{				$post = $this->input->post();				$user_id = intval($post['user_id']);				$validation = $this->validator->check($post, array(									'user_id' => 'required|integer',					'login' => 'required|latin|unique:users,login,user_id|minlength:3|maxlength:255',					'email' => 'required|email|unique:users,email,user_id',					'phone' => 'required|unique:users,phone,user_id|maxlength:255|number',					'password' => 'minlength:5|maxlength:255',					'password_re' => 'match:password',					'type' => 'required|integer'				), array(									'user_id' => array(											'required' => 'ID пользователя отсутствует',						'integer' => 'ID пользователя должен быть числовым значением'					),					'login' => array(											'required' => 'Укажите логин',						'minlength' => 'Логин слишком короткий (минимум 3 символа)',						'maxlength' => 'Логин слишком длинный',						'unique' => 'Такой логин уже существует',						'latin' => 'Логин должен состоять только из латинских букв'					),					'email' => array(											'required' => 'Укажите E-mail',						'unique' => 'Такой E-mail уже существует',						'email' => 'E-mail имеет неверный формат',					),					'phone' => array(											'required' => 'Укажите телефон',						'unique' => 'Такой телефон уже существует',						'maxlength' => 'Поле телефон слишком длинный',						'number' => 'Телефон должен быть цифрой'					),					'password' => array(											'required' => 'Укажите пароль',						'minlength' => 'Пароль слишком короткий (минимум 5 символов)',						'maxlength' => 'Пароль слишком длинный'					),					'password_re' => array(											'required' => 'Повторите пароль',						'match' => 'Пароли не совпадают'					),					'type' => array(											'required' => 'Укажите тип пользователя',						'integer' => 'тип пользователя должен быть числовым значением'					),				));								if($validation)				{										$temp = array();					$temp[] = $post['login'];					$temp[] = $post['email'];					$temp[] = $post['phone'];					$password = '';					if($post['password'])					{						$password = '`password` = ?,';						$temp[] = password_hash($post['password'], PASSWORD_DEFAULT);					}					$temp[] = $post['type'];					$temp[] = $post['user_id'];					$this->db->query("UPDATE `users` SET `login` = ?, `email` = ?, `phone` = ?, ".$password." `type` = ? WHERE `id` = ?", $temp);					$this->session->setFlash('message', 'Пользователь успешно отредактирован');					$this->redirectBack();				}				else				{					$this->redirectBack();				}			}			else			{				$post = $this->input->post();				$user_id = intval($post['user_id']);				$validation = $this->validator->check($post, array(									'login' => 'required|latin|unique:users,login,user_id|minlength:3|maxlength:255',					'email' => 'required|email|unique:users,email,user_id',					'phone' => 'required|unique:users,phone,user_id|maxlength:255|number',					'password' => 'minlength:5|maxlength:255',					'password_re' => 'match:password',					'type' => 'required|integer'				), array(									'login' => array(											'required' => 'Укажите логин',						'minlength' => 'Логин слишком короткий (минимум 3 символа)',						'maxlength' => 'Логин слишком длинный',						'unique' => 'Такой логин уже существует',						'latin' => 'Логин должен состоять только из латинских букв'					),					'email' => array(											'required' => 'Укажите E-mail',						'unique' => 'Такой E-mail уже существует',						'email' => 'E-mail имеет неверный формат',					),					'phone' => array(											'required' => 'Укажите телефон',						'unique' => 'Такой телефон уже существует',						'maxlength' => 'Поле телефон слишком длинный',						'number' => 'Телефон должен быть цифрой'					),					'password' => array(											'required' => 'Укажите пароль',						'minlength' => 'Пароль слишком короткий (минимум 5 символов)',						'maxlength' => 'Пароль слишком длинный'					),					'password_re' => array(											'required' => 'Повторите пароль',						'match' => 'Пароли не совпадают'					),					'type' => array(											'required' => 'Укажите тип пользователя',						'integer' => 'тип пользователя должен быть числовым значением'					),				));								if($validation)				{										$temp = array();					$temp[] = $post['login'];					$temp[] = $post['email'];					$temp[] = $post['phone'];					$password = '';					$p = '';					if($post['password'])					{						$password = '`password`';						$temp[] = password_hash($post['password'], PASSWORD_DEFAULT);						$p = ',?';					}					$this->db->query("INSERT INTO `users` (`login`, `email`, `phone`, ".$password.") VALUES(?, ?, ?".$p.")", $temp);					$this->session->setFlash('message', 'Пользователь успешно добавлен');					$this->redirectBack();				}				else				{					$this->redirectBack();				}			}						return $this->redirectBack();		}		elseif($id === 'search')		{			$data = array();			$sort = $this->input->get('sort');				$temp = array();								$sortQuery = '';				$whereQuery = '';				if($s = $this->input->get('s'))				{					if($whereQuery)					{						$whereQuery .= ' AND `login` LIKE ?';					}					else					{						$whereQuery = ' WHERE `login` LIKE ?';					}					$temp[] = '%'.$s.'%';										}				if(!$sort)				{					$sort = 'ASC';				}					$sortQuery = ' ORDER BY `created_at` '.$sort;																	$data['users'] = $this->db->query("SELECT * FROM `users`".$whereQuery.$sortQuery, $temp)->fetchAll();			$data['sort'] = $sort;			return $this->view(__FUNCTION__, $data);		}		elseif($id === 'edit' && $id2)		{			$id2 = intval($id2);			$data['user'] = $this->db->query("SELECT * FROM `users` WHERE id = ".$id2)->fetch();			$path = './assets/uploads/users/'.$id2.'/';			$data['files'] = \dvijok\core\Helper::getFiles($path);			return $this->view('users_edit', $data);					}		elseif($id === 'delete')		{			$id2 = intval($id2);			$this->db->query("DELETE FROM `users` WHERE `id` = ".$id2);			$this->session->setFlash('message', 'Пользователь успешно удалён');			return $this->redirectBack();											}		elseif($id === 'add')		{			$data = array();			return $this->view('users_add', $data);		}		else		{			$data = [];			$sortQuery = '';			if($sort = $this->input->get('sort'))			{				$sortQuery = ' ORDER BY `created_at` '.$sort;			}						$data['users'] = $this->db->query("SELECT * FROM `users`".$sortQuery)->fetchAll();			return $this->view(__FUNCTION__, $data);		}	}		public function conversations($conversation_id) {				$temp = array();		$temp[] = intval($conversation_id);		$conversation = $this->db->query("SELECT * FROM `conversations` WHERE `id` = ?", $temp)->fetch();		$user_id = intval($conversation['from_id']);		$data = array();		$temp = array();		$temp[] = $user_id;		$data['user'] = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();		$temp = array();		$temp[] = $user_id;		$temp[] = $user_id;				$conversations = $this->db->query("SELECT *,(SELECT `login` FROM `users` WHERE `id` = `conversations`.`from_id`) AS `from_login` ,(SELECT `login` FROM `users` WHERE `id` = `conversations`.`to_id`) AS `to_login` FROM `conversations` WHERE `from_id` = ? OR `to_id` = ? ORDER BY `id` DESC", $temp)->fetchAll();			$data['conversations'] = $conversations;		return $this->view(__FUNCTION__, $data);	}	public function settings() {				$data= array();		return $this->view(__FUNCTION__, $data);			}		public function settings_post() {				$post = $this->input->post();		foreach($post as $key => $value)		{			$temp = array();			$temp[] = $value;			$temp[] = $key;			$this->db->query("UPDATE `settings` SET `value` = ? WHERE `name` = ?", $temp);		}		$this->session->setFlash('message','Настройки успешно изменены');		return $this->redirectBack();	}		public function categories($id = 0, $id2 = 0) {				if($_SERVER['REQUEST_METHOD'] === 'POST')		{			$id = $this->input->post("id");			$id = intval($id);			$title = $this->input->post("title");			$title = strip_tags($title);			$title = \dvijok\core\Helper::clean($title);			$content = $this->input->post("content");						$url = $this->input->post("url");			$url = strip_tags($url);			$parent_id = $this->input->post("parent_id");			$parent_id = intval($parent_id);			if($url && !\dvijok\core\Helper::http_check($url))			{				$url = 'http://'. $url;			}						if($id)			{					$query = $this->db->query("SELECT * FROM `categories` WHERE `title` = '".$title."' AND `id` != ".$id);					$row = $query->fetch();					if(!$row)					{						$this->db->query("UPDATE `categories` SET `title` = '".$title."', `content` = '".$content."', `url` = '".$url."', `parent_id` = ".$parent_id." WHERE `id` = ".$id);						$this->session->setFlash('message', 'Категория успешно отредактирована');					}					else					{						$this->session->setFlash('error', 'Такое название уже есть');					}			}			else			{					$query = $this->db->query("SELECT * FROM `categories` WHERE `title` = '".$title."'");					$row = $query->fetch();										if(!$row)					{												$this->db->query("INSERT INTO `categories` (`title`, `content`, `url`, `parent_id`) VALUES('".$title."', '".$content."' ,'".$url."', ".$parent_id.")");						$this->session->setFlash('message', 'Категория успешно добавлена');					}					else					{												$this->session->setFlash('error', 'Такое название уже есть');					}			}											return $this->redirectBack();		}		elseif( $id > 0)		{			$id = intval($id);			$query = $this->db->query("SELECT * FROM `categories`");						$menus = $query->fetchAll();			$query = $this->db->query("SELECT * FROM `categories` WHERE id = ".$id);			$menu = $query->fetch();			$data['menu'] = $menu;			$data['menus'] = $menus;			return $this->view('categories_edit', $data);					}		elseif($id === 'delete')		{			$id2 = intval($id2);			$this->db->query("DELETE FROM `categories` WHERE `id` = ".$id2);			$this->session->setFlash('message', 'Категория успешно удалена');			return $this->redirectBack();											}		elseif($id === 'add')		{						$id = intval($id);			$query = $this->db->query("SELECT * FROM `categories`");			$menus = $query->fetchAll();			$data['menus'] = $menus;			return $this->view('categories_add', $data);								}		else		{						$query = $this->db->query("SELECT * FROM `categories`");						$menus = $query->fetchAll();			$menus = \dvijok\core\Helper::buildTreeHTMLAdmin($menus, 0, 1, 'categories');			$data = [];			$data['menus'] = $menus;			return $this->view(__FUNCTION__, $data);		}	}		public function upload_content() {						$uploaddir = './assets/uploads/';		$ext = pathinfo($_FILES['file']['name'], PATHINFO_EXTENSION);		$newname = uniqid().'.'.$ext;		$uploadfile = $uploaddir .$newname;				if (move_uploaded_file($_FILES['file']['tmp_name'], $uploadfile)) {			//echo "Файл корректен и был успешно загружен.\n";		} else {			//echo "Возможная атака с помощью файловой загрузки!\n";		}		$uploadfile = ltrim($uploadfile, '.');		echo json_encode(array('location' => $uploadfile, 'csrf' => $this->session->get('csrf')));		exit;			}		public function name() {	    	    $id = intval($this->input->post("id"));	    $name = $this->input->post("name");	    $name = strip_tags($name);	    $fraction = $this->input->post("fraction");	    $fraction = strip_tags($fraction);	    $this->db->query("UPDATE `experience` SET `name` = '".$name."', `fraction` = '".$fraction."' WHERE `id` = ".$id." AND `ip` = '".$_SERVER["REMOTE_ADDR"]."'");	    $this->session->set("name", $name);	    return $this->redirectBack();	}		public function footer() {	    	    return $this->view(__FUNCTION__);	}		public function addmessage(){	    	    $message = $this->input->post("message");	    $message = strip_tags($message);	    $this->db->query("INSERT INTO `chat` (`message`, `name`, `time`) VALUES('".$message."', '".$this->session->get("name")."', NOW())");	    return $this->redirectBack();	}		public function chat(){	    	    $data = [];	    $data["messages"] = $this->db->query("SELECT * FROM `chat` ORDER BY `id` DESC LIMIT 100")->fetchAll();	    return $this->view(__FUNCTION__, $data);	}}