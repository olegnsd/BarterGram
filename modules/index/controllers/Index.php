<?phpnamespace dvijok\modules\index;class Index extends \dvijok\core\Core {	public $user;	public $data;	public $path;	public $settings;	public function __construct($path, $data) {				parent::__construct($path, $data); 		$settings = $this->db->query("SELECT * FROM `settings`")->fetchAll();		$s2 = array();		foreach($settings as $s)		{			$s2[$s['name']] = $s['value'];		}		$this->settings = $s2;		if(!$this->settings['site_enabled'] && $path['function'] != 'site_closed')		{			return $this->redirect('/site_closed'); 					}				$this->data = $data;		$this->path = $path;		$this->current_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";		$this->relative_url = $_SERVER['REQUEST_URI'];		\dvijok\core\Config::$current_url = $this->current_url;		\dvijok\core\Config::$relative_url = $this->relative_url;		if($this->session->has('user_id'))		{			$temp = array();			$temp[] = $this->session->get('user_id');			$this->user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();		}		$temp = array();		$temp[] = $this->user['id'];		$temp[] = $this->user['id'];				//$temp[] = $this->user['id'];		$newMessagesCount = $this->db->query("SELECT * FROM `messages` WHERE (`is_system` = 1 AND `is_new_from` = 1 AND `from_id` = ?) OR (`is_new` = 1 AND `to_id` = ?) GROUP BY `conversation_id`", $temp);			$newMessagesCount = $newMessagesCount->result->num_rows;		$this->newMessagesCount = $newMessagesCount;	}		public function site_closed() {						return $this->view(__FUNCTION__);			}		public function arbitrary_project() {				$post = $this->input->post();		$article_id = intval($post['article_id']);		if($article_id)		{			$temp = array();			$temp[] = intval($post['article_id']);			$this->db->query("UPDATE `articles` SET `finished` = 1, `payed` = 0 WHERE `id` = ?", $temp);			$this->session->setFlash('message', 'Вы успешно обратились в арбитраж');		}		return $this->redirectBack();			}		public function page($id) {				$id = intval($id);		$temp = array();		$temp[] = $id;		$page = $this->db->query("SELECT * FROM `pages` WHERE `id` = ?", $temp)->fetch();		$data = array();		$data['page'] = $page;	    return $this->view(__FUNCTION__, $data);	}		public function header(){	    		$pages = $this->db->query("SELECT * FROM `pages` ORDER BY `created_at` DESC")->fetchAll();		$this->data['pages'] = $pages;		$this->data['slider'] = $this->db->query("SELECT * FROM `slider` ORDER BY `created_at` DESC")->fetchAll();	    return $this->view(__FUNCTION__, $this->data);	}	public function index() {		/*        $ip = $_SERVER["REMOTE_ADDR"];        $row = $this->db->query("SELECT * FROM `experience` WHERE `ip` = '".$ip."'");        $d = $row->fetch();       // echo "<pre>";     //   print_r($row);      //  echo "</pre>";      // exit;        $data = [];        if($row->result->num_rows == 0){        $data["r"] = random_int(1, 20);        $this->db->query("INSERT INTO `experience` (`amount`, `ip`, `name`) VALUES(".$data["r"].", '".$_SERVER["REMOTE_ADDR"]."', '')");        }        else{                                    $data["r"] = $d["amount"];        }        $data["heroes"] = $this->db->query("SELECT * FROM `experience` ORDER BY `id` DESC LIMIT 100")->fetchAll();        $exp = $this->db->query("SELECT SUM(`amount`) AS `exp`, `id`, `name` FROM `experience`");                $row2 = $exp->fetch();        $data["level"] = intdiv($row2["exp"], 100) + 1;        $data["left"] = $row2["exp"] % 100;        $data["id"] = $d["id"];        $data["name"] = $d["name"];        $data["fraction"] = $d["fraction"];		return $this->view(__FUNCTION__, $data);		*/        //$query = $this->db->query("SELECT * FROM `menu`");                //$menus = $query->fetchAll();		//$menus = \dvijok\core\Helper::buildTreeHTML($menus);		$data = [];		$data['title'] = 'Главная страница';		$page = $this->input->get('page');		$get = $this->input->get();		$where = 'WHERE `id` = `id`';		$temp = array();		if(isset($get['search']))		{			$where .= ' AND `title` LIKE CONCAT("%",?,"%")';			$temp[] = $get['search'];		}		if(isset($get['type']) && $get['type'])		{			$where .= ' AND `type` = ?';			$temp[] = $get['type'];			//$temp[] = $get['direction'];		}				if(isset($get['pay_type']))		{			$where .= ' AND `pay_type` = ?';			$temp[] = $get['pay_type'];			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		if(isset($get['finished']))		{			$where .= ' OR `finished` = ?';			$temp[] = 1;			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		else		{			$where .= ' AND `finished` = ?';			$temp[] = 0;		}		if(isset($get['sort']))		{			$s = $this->db->link->real_escape_string($get['sort']);			if(isset($get['direction']))			{				$d = $this->db->link->real_escape_string($get['direction']);			}			$where .= ' ORDER BY '.$s.' '.$d;			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		else		{			$where .= ' ORDER BY `created_at` DESC';		}						$paginate = \dvijok\core\Helper::paginate($page, $this->settings['per_page'], 'articles', $this, $where, $temp);				$data['nextprevlinks'] = $paginate['links'];		$data['articles'] = $paginate['rows'];		$data['content'] = 'Добро пожаловать Уважаемый пользователь, для начала прочитайте <a href="/rules">правилами пользования ресурсом</a>';						foreach($data['articles'] as &$a)		{						$path = './assets/uploads/users/'.$a['user_id'].'/';			$a['files'] = \dvijok\core\Helper::getFiles($path);					}		//$data['menus'] = $menus;	//	$data['news'] = $this->db->query("SELECT * FROM `news` ORDER BY `id` DESC LIMIT 2")->fetchAll();		//$data['little_about_us'] = $this->db->query("SELECT * FROM `post` WHERE `type` = 'little-about-us'")->fetch();		return $this->view(__FUNCTION__, $data);	}		public function content($c = '', $menu = 'menu') {			//$c = stripslashes($c);		//echo $c;		//$c = \dvijok\core\Helper::transliterate(null, $c);		$t = explode('-', $c);		$c = end($t);		$query = $this->db->query("SELECT * FROM `".$menu."` WHERE `id` = '".$c."'");		$row = $query->fetch();		$data = [];        $query = $this->db->query("SELECT * FROM `leftmenu`");                $menus = $query->fetchAll();		$menus = \dvijok\core\Helper::buildLeftTreeHTML($menus);				$data['leftmenu'] = $menus;		$data['c'] = $row;        $query = $this->db->query("SELECT * FROM `menu`");                $menus = $query->fetchAll();		$menus = \dvijok\core\Helper::buildTreeHTML($menus);		$data['menu'] = $menus;		return $this->view(__FUNCTION__, $data);							}		public function content_news($c = '', $menu = 'news') {			//$c = stripslashes($c);		//echo $c;		//$c = \dvijok\core\Helper::transliterate(null, $c);		//$c = urldecode($c);		//echo $c;		//echo "SELECT * FROM `".$menu."` WHERE `title` = '".$c."'";		$t = explode('-', $c);		$c = end($t);		$query = $this->db->query("SELECT * FROM `".$menu."` WHERE `id` = '".$c."'");		$row = $query->fetch();		$data = [];        $query = $this->db->query("SELECT * FROM `leftmenu`");                $menus = $query->fetchAll();		$menus = \dvijok\core\Helper::buildLeftTreeHTML($menus);				$data['leftmenu'] = $menus;		$data['c'] = $row;        $query = $this->db->query("SELECT * FROM `menu`");                $menus = $query->fetchAll();		$menus = \dvijok\core\Helper::buildTreeHTML($menus);		$data['menu'] = $menus;		return $this->view(__FUNCTION__, $data);							}	public function footer() {	    	    return $this->view(__FUNCTION__);	}		public function category($title) {				$title = explode('-', $title);		$id = end($title);		$temp = array();		$temp[] = $id;		$cat = $this->db->query("SELECT * FROM `categories` WHERE `id` = ?", $temp)->fetch();		if(!$cat)		{			return $this->redirect('/error404');		} 		$menu = $this->db->query("SELECT * FROM `categories`")->fetchAll();		$children = \dvijok\core\Helper::buildTree($menu, $id);		$ids = array();		$ids[] = $id;		foreach($children as $ch)		{			$ids[] = $ch['id'];					}		//$temp = array();		//$temp[] = $cat['id'];		//$articles = $this->db->query("SELECT * FROM `articles` ORDER BY `created_at` DESC LIMIT 200")->fetchAll();		$page = $this->input->get('page');		$get = $this->input->get();				$where = 'WHERE `category_id` IN( '.implode(',', $ids).')';		$temp = array();		if(isset($get['search']))		{			$where .= ' AND `title` LIKE CONCAT("%",?,"%")';			$temp[] = $get['search'];		}		if(isset($get['type']) && $get['type'])		{						$where .= ' AND `type` = ?';			$temp[] = $get['type'];			//$temp[] = $get['direction'];		}				if(isset($get['pay_type']))		{			$where .= ' AND `pay_type` = ?';			$temp[] = $get['pay_type'];			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		if(isset($get['finished']))		{			$where .= ' OR `finished` = ?';			$temp[] = 1;			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		else		{			$where .= ' AND `finished` = ?';			$temp[] = 0;		}		if(isset($get['sort']))		{			$s = $this->db->link->real_escape_string($get['sort']);			if(isset($get['direction']))			{				$d = $this->db->link->real_escape_string($get['direction']);			}			$where .= ' ORDER BY '.$s.' '.$d;			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		else		{			$where.= ' ORDER BY `created_at` DESC';		}		$articles = $this->db->query("SELECT * FROM `articles` WHERE `category_id` IN( ".implode(',', $ids).")")->fetchAll();		\dvijok\core\Helper::buildTreeC($menu, 0, $articles);		$paginate = \dvijok\core\Helper::paginate($page, $this->settings['per_page'], 'articles', $this, $where, $temp);		$articles = $paginate['rows'];		$articles_temp = array();		foreach($menu as $m)		{			if($cat['id'] == $m['id'] && $m['ids'])			{				//$ids = implode(',', $m['ids']);				foreach($articles as &$a)				{					$a['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$a['user_id'].'/');					if(in_array( $a['category_id'], $m['ids']))					{						$articles_temp[] = $a;											}									}							}		}		$menuHTML = \dvijok\core\Helper::buildTreeHTML($menu, $cat['id'], 1);		//$arrMenu = \dvijok\core\Helper::buildTree($menu, $cat['id']);		$data = array();		$data['cat'] = $cat;		$data['categories'] = $menuHTML;		$temp = array();		$temp[] = $cat['id'];		//$data['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$this->user['id'].'/');				$data['articles'] = $articles_temp;		$data['nextprevlinks'] = $paginate['links'];			    return $this->view(__FUNCTION__, $data);	}		public function article($title) {						$title = explode('-', $title);		$id = end($title);				$temp = array();		$temp[] = $id;		$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		if(!$article)		{			return $this->redirect('/error404');		}		$temp = array();		$temp[] = $article['user_id'];		$user = $this->db->query("SELECT * FROM `users` WHERE id = ?", $temp)->fetch();		$temp = array();		$temp[] = $id;		$offers = $this->db->query("SELECT *,		(SELECT `login` FROM `users` WHERE `users`.`id` = `offers`.`user_id`) AS `login`,		(SELECT `id` FROM `users` WHERE `users`.`id` = `offers`.`user_id`) AS `user_id`		FROM `offers` WHERE `article_id` = ?",		$temp)->fetchAll();		$data = array();		foreach($offers as $o)		{						if($this->user && $this->user['id'] == $o['user_id'])			{								$data['already_offered'] = 1;				break;			}					}		foreach($offers as $o)		{						if($o['status'] == 1)			{				$data['already_selected_offer'] = 1;				break;			}					}		$data['article'] = $article;		$data['offers'] = $offers;		$data['user'] = $user;		$data['ufiles'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$user['id'].'/');		$path = './assets/uploads/articles/'.$id.'/';		$files = \dvijok\core\Helper::getFiles($path);				$data['files'] = $files;	    return $this->view(__FUNCTION__, $data);	}		public function uploadavatar() {				$id = $this->user['id'];		\dvijok\core\Helper::uploadMultiple($_FILES, './assets/uploads/users/'.$id.'/', 'avatar');		$this->session->setFlash('message', 'Ваша аватарка успешно обновлена');		return $this->redirectBack();	}		public function leftBar() {			    $data = [];		$menu = $this->db->query("SELECT * FROM `categories`")->fetchAll();		$articles = $this->db->query("SELECT * FROM `articles`")->fetchAll();		\dvijok\core\Helper::buildTreeC($menu, 0, $articles);		//$menu = \dvijok\core\Helper::array_flatten($menu);		//echo '<pre>';		//print_r($menu);		//echo '</pre>';		//exit;		$menu = \dvijok\core\Helper::buildTreeHTML($menu, 0, 1, $articles);		$data['menu'] = $menu;	    return $this->view(__FUNCTION__, $data);	}		public function oferta() {				$data = array();		$data['oferta'] = $this->db->query("SELECT * FROM `pages` WHERE `type` = 'oferta'")->fetch();	    return $this->view(__FUNCTION__, $data);	}		public function rules() {				$data = array();		$data['rules'] = $this->db->query("SELECT * FROM `pages` WHERE `type` = 'rules'")->fetch();	    return $this->view(__FUNCTION__, $data);	}		public function addoffer() {				$post = $this->input->post();		$temp = array();		$temp[] = $post['message'];		$temp[] = $this->user['id'];		$temp[] = $post['article_id'];		$this->db->query("INSERT INTO `offers` (`message`, `user_id`, `article_id`) VALUES(?, ?, ?)", $temp);		$offer_id = $this->db->insertId();		$temp = array();		$temp[] = $post['article_id'];		$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		$temp = array();		$temp[] = $this->user['id'];		$temp[] = $article['user_id'];		$temp[] = $this->user['id'];		$temp[] = $article['user_id'];		$temp[] = $offer_id;		$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();				if($m)		{			$conversation_id = $m['id'];			$offer_id = $m['offer_id'];		}		else		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $article['user_id'];			$temp[] = $offer_id;			$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);			$conversation_id = $this->db->insertId();		}		$cutmsg = \dvijok\core\Helper::truncate($post['message'], 200);		$temp = array();		$temp[] = $this->user['id'];		$temp[] = $article['user_id'];		$temp[] = $conversation_id;		$temp[] = 1;		$temp[] = '<strong>Системное сообщение: </strong> Вы подали заявку на проект <a href="/article/'.\dvijok\core\Helper::transliterate($article['title']).'-'.$article['id'].'">'.$article['title'].'</a>';		$temp[] = '<strong>Системное сообщение: </strong>		Пользователь <a href="/user/'.$this->user['login'].'">'.$this->user['login'].'</a> оставил заявку на ваш проект <a href="/article/'.\dvijok\core\Helper::transliterate($article['title']).'-'.$article['id'].'">'.$article['title'].'</a><br /><strong>С текстом:</strong><br /><div>'.$cutmsg.'</div>';		$temp[] = $offer_id;		$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `is_system`, `back_message`, `message`, `offer_id`) VALUES(?, ?, ?, ?, ?, ?, ?)", $temp);		//print_r($temp);		//exit;		$this->session->setFlash('message', 'Ваша заявка подана');		$this->redirectBack();			}		public function messages($id = false) {								$data = array();		$id = intval($id);		$work_user = $this->user['id'];		$data['conversation_id'] = 0;		if(!$id)		{			/*			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			$data['message_groups'] = $this->db->query("SELECT *, 			(SELECT COUNT(*) FROM `messages` AS `messages2` WHERE (`messages2`.`from_id` = `messages`.`from_id` AND `messages2`.`to_id` = `messages`.`to_id`) OR (`messages2`.`from_id` = `messages`.`to_id` AND `messages2`.`to_id` = `messages`.`from_id`)) AS `count_messages`,			(SELECT `login` FROM `users` WHERE `users`.`id` = `messages`.`from_id`) AS `from_login`,			(SELECT `login` FROM `users` WHERE `users`.`id` = `messages`.`to_id`) AS `to_login`,			(SELECT COUNT(*) FROM `messages` AS `messages2` WHERE (`is_system` = 1 AND `is_new_from` = 1 AND `from_id` = ?) OR (`is_new` = 1 AND `from_id` = `messages`.`from_id` AND `to_id` = ?)) AS `is_new`			FROM `messages` WHERE (`from_id` = ? AND `to_id` != ?) OR (`from_id` != ? AND `to_id` = ?) GROUP BY `from_login` ORDER BY `created_at` DESC", $temp)->fetchAll();			*/						//$temp = array();			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];						//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			/*			$data['message_groups'] = $this->db->query("SELECT *,			(SELECT COUNT(*) FROM `messages` AS `messages2` WHERE (`messages2`.`from_id` = `m2`.`from_id` AND `messages2`.`to_id` = `m2`.`to_id`) OR (`messages2`.`from_id` = `m2`.`to_id` AND `messages2`.`to_id` = `m2`.`from_id`)) AS `count_messages`,			(SELECT `login` FROM `users` WHERE `users`.`id` = `m2`.`from_id`) AS `from_login`,			(SELECT `login` FROM `users` WHERE `users`.`id` = `m2`.`to_id` ) AS `to_login`			FROM `messages` AS `m2` WHERE (`to_id` = ? AND `from_id` != ?) OR (`from_id` = ? AND `to_id` != ?) GROUP BY `is_new` ORDER BY `created_at` DESC", $temp)->fetchAll();			$messages = $this->db->query("SELECT * FROM `messages` WHERE `is_new` = 1")->fetchAll();			*/			//unset($data['message_groups'][0]);			//$data['message_groups'] = $this->db->query("SELECT * FROM `messages` WHERE (`from_id` = ? AND `to_id` != ?) OR (`from_id` != ? AND `to_id` = ?)", $temp)->fetchAll();			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$temp[] = $this->user['id'];			$conversations = $this->db->query("SELECT * FROM `conversations` WHERE (`from_id` = ? AND `to_id` != ?) OR (`to_id` = ? AND `from_id` != ?)", $temp)->fetchAll();			//$temp = array();						//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];						$cons = array();			foreach($conversations as $c)			{				$temp = array();				$temp[] = $c['id'];				//$temp[] = $c['to_id'];				//$temp[] = $c['from_id'];				//$temp[] = $c['to_id'];				//$temp[] = $c['from_id'];				//$temp[] = $c['id'];				$temp[] = $c['id'];									$cons[]= $this->db->query("SELECT *,				(SELECT COUNT(*) FROM `messages` WHERE `conversation_id` = ?) AS `count_messages`,				(SELECT `login` FROM `users` WHERE `users`.`id` = `messages`.`from_id`) AS `from_login`,				(SELECT `login` FROM `users` WHERE `users`.`id` = `messages`.`to_id` ) AS `to_login`,				(SELECT `article_id` FROM `offers` WHERE `id` = `messages`.`offer_id`) AS `article_id`,				(SELECT `title` FROM `articles` WHERE `id` = `article_id`) AS `article_title`				FROM `messages` WHERE `conversation_id` = ? ORDER BY `created_at` DESC", $temp)->fetch();			}			//echo '<pre>';			//print_r($cons);			//echo '</pre>';			//exit;			$cons = array_filter($cons);			$data['message_groups'] = $cons;			//print_r($data['message_groups']);					}		else		{			$temp = array();			//$temp[] = $id;			//$temp[] = $id;			//$temp[] = $id;			//$temp[] = $this->user['id'];			//$temp[] = $this->user['id'];			//$temp[] = $id;			//$temp[] = $this->user['id'];			$temp[] = $id;			$data['messages'] = $this->db->query("SELECT *, 			(SELECT COUNT(*) FROM `messages` AS `messages2` WHERE `messages2`.`to_id` = `messages`.`to_id` AND `messages2`.`from_id` = `messages`.`from_id`) AS `count_messages`,			(SELECT `login` FROM `users` WHERE `users`.`id` = `messages`.`to_id`) AS `to_login`,			(SELECT `login` FROM `users` WHERE `users`.`id` = `messages`.`from_id`) AS `from_login`			FROM `messages` WHERE `conversation_id` = ? ORDER BY `created_at` ASC", $temp)->fetchAll();									$temp = array();			$temp[] = $id;			$conversation = $this->db->query("SELECT * FROM `conversations` WHERE `id` = ?", $temp)->fetch();			$data['conversation_id'] = $conversation['id'];			$data['offer_id'] = $conversation['offer_id'];			if($conversation['from_id'] != $this->user['id'] && $conversation['to_id'] != $this->user['id'] && $this->user['type'] != 2)			{				$this->session->setFlash('message', 'Вы не имеете прав просматривать эту переписку');				return $this->redirect('/');							}			$temp = array();			$temp[] = $id;			$temp[] = $this->user['id'];						$this->db->query("UPDATE `messages` SET `is_new` = 0 WHERE `conversation_id` = ? AND `to_id` = ?", $temp);			$temp = array();			$temp[] = $id;			$temp[] = $this->user['id'];			$this->db->query("UPDATE `messages` SET `is_new_from` = 0 WHERE `conversation_id` = ? AND `from_id` = ?", $temp);			$temp = array();			$main_user = 0;			$work_user = 0;			if($conversation['to_id'] == $this->user['id'])			{				$temp[] = $conversation['from_id'];				$main_user = $conversation['from_id'];				$work_user = $conversation['to_id'];			}			else			{				$temp[] = $conversation['to_id'];				$main_user = $conversation['to_id'];				$work_user = $conversation['from_id'];			}									$user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();			$data['messager'] = $user['login'];			$data['user'] = $user;			$temp = array();			$temp[] = $id;			$offers_conversations = $this->db->query("SELECT *, (SELECT `amount` FROM `payments` WHERE `payments`.`offer_id` = `offers`.`id` AND `type` = 'reservation') AS `amount`, (SELECT `user_id` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `article_user_id`, (SELECT `title` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `title`, (SELECT `finished` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `finished`, (SELECT `payed` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `payed`, (SELECT `arbitrary` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `arbitrary` FROM `offers_conversations` JOIN `offers` ON `offers_conversations`.`offer_id` = `offers`.`id` WHERE `offers_conversations`.`conversation_id` = ? AND `offers`.`result` = 0", $temp)->fetchAll();						$finishes = array();			foreach($offers_conversations as $key => $ofc)			{				if($data['offer_id'] != $ofc['offer_id']){continue;}				if($ofc['result'] == 0 && $ofc['status'] = 1 && $ofc['agree'] == 1 && $this->user['id'] == $ofc['article_user_id'] && $ofc['amount'] > 0)				{					if($ofc['finished']){continue;}					$finishes[$key]['id'] = $ofc['offer_id'];					$finishes[$key]['article_id'] = $ofc['article_id'];					$finishes[$key]['title'] = $ofc['title'];				}			}						$data['finishes'] = $finishes;			//echo '<pre>';			//print_r($finishes);			//echo '</pre>';			//exit;			/*			if($data['messages'])			{				if($data['messages'][0]['from_login'] == $this->user['login'])				{					$data['messager'] = $data['messages'][0]['to_login'];				}				if($data['messages'][0]['to_login'] == $this->user['login'])				{					$data['messager'] = $data['messages'][0]['from_login'];				}			}			*/			$temp = array();			$temp[] = $work_user;			$temp[] = $data['offer_id'];			$offers = $this->db->query("SELECT *, (SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title`, (SELECT `finished` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `finished`, (SELECT `payed` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `payed`, (SELECT `arbitrary` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `arbitrary`, (SELECT `type` FROM `payments` WHERE `payments`.`article_id` = `offers`.`article_id` AND `type` = 'reservation') AS `reservation` FROM `offers` WHERE `user_id` = ? AND `status` = 1 AND `agree` = 1 AND `id` = ?", $temp)->fetchAll();			$data['work_user_projects'] = $offers;						$temp = array();			$temp[] = $main_user;			$temp[] = $data['offer_id'];			$offers = $this->db->query("SELECT *, (SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title`, (SELECT `finished` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `finished`, (SELECT `payed` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `payed`, (SELECT `arbitrary` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `arbitrary`, (SELECT `type` FROM `payments` WHERE `payments`.`article_id` = `offers`.`article_id` AND `type` = 'reservation') AS `reservation` FROM `offers` WHERE `user_id` = ? AND `status` = 1 AND `agree` = 1 AND `id` = ?", $temp)->fetchAll();			$data['work_user_projects2'] = $offers;			//echo '<pre>';			//print_r($offers);			//echo '</pre>';		}		$data['id'] = $id;		$data['work_user'] = $work_user;		return $this->view(__FUNCTION__, $data);			}		public function reject_project() {				$post = $this->input->post();		$id = intval($post['offer_id']);		$temp = array();		$temp[] = $id;		$offer = $this->db->query("SELECT *, (SELECT `user_id` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `article_user_id`,(SELECT `login` FROM `users` WHERE `id` = `article_user_id`) AS `article_user_login` FROM `offers` WHERE `offers`.`id` = ?", $temp)->fetch();		if($offer['user_id'] == $this->user['id'])		{						$temp = array();			$temp[] = $offer['article_id'];			$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();						$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['article_user_id'];			$temp[] = $this->user['id'];			$temp[] = $offer['article_user_id'];			$m = $this->db->query("SELECT * FROM `conversations` WHERE (`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)", $temp)->fetch();			if($m)			{				$conversation_id = $m['id'];			}			else			{				$temp = array();				$temp[] = $this->user['id'];				$temp[] = $offer['user_id'];				$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`) VALUES(?, ?)", $temp);				$conversation_id = $this->db->insertId();			}			$temp = array();			$temp[] = $offer['id'];			$reservation = $this->db->query("SELECT * FROM `payments` WHERE `offer_id` = ?", $temp)->fetch();			if($reservation)			{				$temp = array();				$temp[] = $reservation['amount'];				$temp[] = $offer['id'];				$temp[] = $offer['article_id'];				$temp[] = $reservation['user_id'];				$temp[] = 'back_pay';				$this->db->query("INSERT INTO `payments`(`amount`, `offer_id`, `article_id`, `user_id`, `type`) VALUES(?, ?, ?, ?, ?)", $temp);											}			$temp = array();			$temp[] = -1;			$temp[] = $id;			$this->db->query("UPDATE `offers` SET `status` = ?, `agree` = -1 ,`result` = -1 WHERE `id` = ?", $temp);			$this->session->setFlash('message', 'Вы успешно отклонили заявку');			$temp = array();			$temp[] = $offer['user_id'];			$user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();			$temp = array();			$temp[] = $offer['article_user_id'];			$temp[] = $offer['user_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong> Вы отказались от проекта <a href="/article/'.\dvijok\core\Helper::transliterate($article['title']).'-'.$article['id'].'">'.$article['title'].'</a> пользователя <a href="'.$this->baseUrl.'user/'.$offer['article_user_login'].'">'.$offer['article_user_login'].'</a></p>';			$temp[] = 1;			$temp[] = '<strong>Системное сообщение: </strong>Пользователь <a href="'.$this->baseUrl.'user/'.$user['login'].'">'.$user['login'].'</a> отказался от проекта <a href="/article/'.\dvijok\core\Helper::transliterate($article['title']).'-'.$article['id'].'">'.$article['title'].'</a>';			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `is_system`, `back_message`) VALUES(?, ?, ?, ?, ?, ?)", $temp);		}						$this->redirectBack();	}			public function articleFilter() {						$data = array();		return $this->view(__FUNCTION__, $data);			}		public function finish_project() {				$post = $this->input->post();		$result = intval($post['result']);		$revision = strip_tags($post['revision']);		$temp = array();		$temp[] = intval($post['offer_id']);		$offer = $this->db->query("SELECT * FROM `offers` WHERE `id` = ?", $temp)->fetch();		$temp = array();		$temp[] = $offer['article_id'];		$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		$temp = array();		$temp[] = $result;		$temp[] = $revision;		$temp[] = intval($post['offer_id']);		$this->db->query("UPDATE `offers` SET `result` = ?, `revision` = ?, `revision_date` = NOW() WHERE `id` = ?", $temp);		$temp = array();		$temp[] = $post['result_pay'];		$temp[] = $article['id'];		$this->db->query("UPDATE `articles` SET `payed` = ? WHERE `id` = ?", $temp);		if($post['result_pay'] == 1)		{			$temp = array();			$temp[] = $article['id'];			$reservation = $this->db->query("SELECT * FROM `payments` WHERE `article_id` = ? AND `typr` = 'payment'", $temp)->fetch();			$temp = array();			$temp[] = $reservation['amount'];			$temp[] = $offer['id'];			$temp[] = $offer['article_id'];			$temp[] = $offer['user_id'];			$temp[] = 'payment';			$this->db->query("INSERT INTO `payments`(`amount`, `offer_id`, `article_id`, `user_id`, `type`) VALUES(?, ?, ?, ?, ?)", $temp);			//$id = $this->db->insertId();		}		if($post['result_pay'] == -1)		{			$temp = array();			$temp[] = $article['id'];			$reservation = $this->db->query("SELECT * FROM `payments` WHERE `article_id` = ? AND `typr` = 'payment'", $temp)->fetch();			$temp = array();			$temp[] = $reservation['amount'];			$temp[] = $offer['id'];			$temp[] = $offer['article_id'];			$temp[] = $this->user['id'];			$temp[] = 'back_pay';			$this->db->query("INSERT INTO `payments`(`amount`, `offer_id`, `article_id`, `user_id`, `type`) VALUES(?, ?, ?, ?, ?)", $temp);								}		$temp = array();		$temp[] = $this->user['id'];		$temp[] = $offer['user_id'];		$temp[] = $this->user['id'];		$temp[] = $offer['user_id'];		$temp[] = $offer['id'];		$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();		if($m)		{			$conversation_id = $m['id'];		}		else		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['user_id'];			$temp[] = $offer['id'];			$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);			$conversation_id = $this->db->insertId();		}		$rs = '';		if($result > 0)		{			$rs = 'с положительным отзывом +'.$result;		}		if($result < 0)		{			$rs = 'с отрицательным отзывом -'.$result;		}		$temp = array();		$temp[] = $article['id'];		$this->db->query("UPDATE `articles` SET `finished` = 1 WHERE `id` = ?", $temp);		$temp = array();		$temp[] = $this->user['id'];		$temp[] = $offer['user_id'];		$temp[] = $conversation_id;		$temp[] = '<strong>Системное сообщение: </strong>						<p>Проект <strong>"'.$article['title'].'"</strong> завершён ('.$rs.')</p>						<div>						Отзыв: <strong>'.$revision.'</strong>						</div>						';		$temp[] = '<strong>Системное сообщение: </strong>						<p>Проект <strong>"'.$article['title'].'"</strong> завершён ('.$rs.')</p>						<div>						Отзыв: <strong>'.$revision.'</strong>						</div>						';		$temp[] = $offer['id'];		$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `back_message`, `message`, `offer_id`) VALUES(?, ?, ?, ?, ?, ?)", $temp);		$this->session->setFlash('message', 'Вы завершили сделку');		return $this->redirectBack();			}		public function sendmessage($id = false) {				$post = $this->input->post();		$id = intval($post['to_id']);		$message = strip_tags($post['message']);		if(!$message)		{			$this->session->setFlash('message', 'Сообщение пустое');			return $this->redirectBack();		}		$temp = array();		$temp[] = $this->user['id'];		$temp[] = $id;		$temp[] = $this->user['id'];		$temp[] = $id;		if(isset($post['offer_id']))		{			$temp[] = intval($post['offer_id']);		}		else		{			$temp[] = 0;		}		$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();		$offer_id = 0;		if($m)		{			$conversation_id = $m['id'];			$offer_id = $m['offer_id'];		}		else		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $id;			$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`) VALUES(?, ?)", $temp);			$conversation_id = $this->db->insertId();		}						$temp = array();		$temp[] = $this->user['id'];		$temp[] = $id;		$temp[] = $conversation_id;		$temp[] = $message;		$temp[] = $offer_id;		$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `offer_id`) VALUES(?, ?, ?, ?, ?)", $temp);		$message_id = $this->db->insertId();		if(!$id)		{			$this->session->setFlash('message', 'Сообщение успешно отправлено');			$this->redirectBack();		}		else		{			$this->redirect('/messages/'.$conversation_id.'#message_'.$message_id);		}			}		public function login() {				$data = array();		return $this->view(__FUNCTION__, $data);	}		public function login_post() {				$post = $this->input->post();		$validation = $this->validator->check($post, array(					'login' => 'required|exists:users,login',			'password' => 'required|verify:users,password,login'		), array(					'login' => array(							'required' => 'Укажите логин',				'exists' => 'Такого логина не существует'			),			'password' => array(							'required' => 'Укажите пароль',				'verify' => 'Неверный пароль'			)		));		if($validation)		{			$temp = array();			$temp[] = $post['login'];			$user = $this->db->query("SELECT * FROM `users` WHERE `login` = ?", $temp)->fetch();			$this->session->set('user_id', $user['id']);			if(isset($post['show_auth']))			{				$this->redirectBack();							}			else			{				$this->redirect('/');			}		}		else		{			//print_r($post['redirectTo']);			//exit;			//if($post['redirectTo'])			//{				//$this->redirectBack();							//}			//else			//{			//	$this->redirect($post['redirectTo']);			//}			if(isset($post['show_auth']))			{				$this->session->setFlash('show_auth', 1);				$this->redirectBack();							}			else			{				$this->redirectBack();			}		}			}		public function users() {				$temp = array();		$data = array();		$page = $this->input->get('page');		$get = $this->input->get();				$where = 'WHERE `id` = `id`';		$temp = array();		if(isset($get['search']))		{			$where .= ' AND `login` LIKE CONCAT("%",?,"%")';			$temp[] = $get['search'];		}		/*		if(isset($get['type']) && $get['type'])		{						$where .= ' AND `type` = ?';			$temp[] = $get['type'];			//$temp[] = $get['direction'];		}		*/		$select = '*, (SELECT SUM(`result`) FROM `offers` WHERE `user_id` = `users`.`id`) AS `result`';		if(isset($get['only_with_plus_results']))		{			$where .= ' HAVING `result` > 0';			//$temp[] = $get['pay_type'];			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}		if(isset($get['sort']))		{			$s = $this->db->link->real_escape_string($get['sort']);			if(isset($get['direction']))			{				$d = $this->db->link->real_escape_string($get['direction']);			}			$where .= ' ORDER BY '.$s.' '.$d;			//$temp[] = $get['sort'];			//$temp[] = $get['direction'];		}						$paginate = \dvijok\core\Helper::paginate($page, $this->settings['per_page'], 'users', $this, $where, $temp, $select);				$data['users'] = $paginate['rows'];				foreach($data['users'] as &$a)				{										$temp = array();					$temp[] = $a['id'];					$data['current_offers'] = $this->db->query("SELECT * ,(SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id`,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `user_id` = ? AND `result` = 0 AND `agree` = 1 AND `status` = 1 ORDER BY `created_at` DESC", $temp)->fetchAll();					$data['offers'] = $this->db->query("SELECT * ,(SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id`,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `user_id` = ? AND `result` != 0 AND `agree` = 1 AND `status` = 1 ORDER BY `created_at` DESC", $temp)->fetchAll();					 					$rating_plus = 0;					$rating_minus = 0;					foreach($data['offers'] as &$of)					{						$temp = array();						$temp[] = $of['user_id'];						$of['user'] = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();												if($of['result'] > 0)						{							$rating_plus += $of['result'];						}						if($of['result'] < 0)						{							$rating_minus += $of['result'];							$of['result'] = $of['result'];						}					}					$a['rating_plus'] = $rating_plus;					$a['rating_minus'] = abs($rating_minus);					$a['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$a['id'].'/');									}		$data['nextprevlinks'] = $paginate['links'];		return $this->view(__FUNCTION__, $data);					}		public function usersettings() {				$temp = array();				$user = $this->user;				$data = array();		$data['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$user['id'].'/');		$data['user'] = $user;		return $this->view(__FUNCTION__, $data);	}	public function usersettings_post() {				$post = $this->input->post();		$validation = $this->validator->check($post, array(			'id' => 'required|integer|exists:users,id',			'phone' => 'required|unique:users,phone,id|maxlength:255',			'password_old' => 'required|verify:users,password,id',			'password_new' => 'minlength:5|maxlength:255',			'password_re' => 'match:password_new'		), array(					'id' => array(							'required' => 'Укажите ID пользователя',				'integer' => 'Неверное значение ID пользователя',				'exists' => 'Такой пользователь не существует'						),			'phone' => array(							'required' => 'Укажите телефон',				'unique' => 'Такой телефон уже существует',				'maxlength' => 'Поле телефон слишком длинный'			),			'password_old' => array(							'required' => 'Укажите ваш старый пароль',				'verify' => 'Пароль не прошёл проверку'						),			'password_new' => array(							'required' => 'Укажите пароль',				'minlength' => 'Пароль слишком короткий (минимум 5 символов)',				'maxlength' => 'Пароль слишком длинный'			),			'password_re' => array(							'required' => 'Повторите пароль',				'match' => 'Пароли не совпадают'			)		));		if($validation)		{			//print_r($post);			//exit;			$temp = array();			$temp[] = $post['phone'];			if($post['password_new'])			{				$temp[] = password_hash($post['password_new'], PASSWORD_DEFAULT);			}			else			{				$temp[] = $this->user['password'];			}			$temp[] = $this->user['id'];			$this->db->query("UPDATE `users` SET  `phone` = ?, `password` = ? WHERE `id` = ?", $temp);			$this->session->setFlash('message', 'Вы успешно изменили данные');			$this->redirectBack();		}		else		{			$this->redirectBack();		}	}		public function acceptoffer($id) {				$id = intval($id); 		$temp = array();		$temp[] = $id;		$article = $this->db->query("SELECT *,(SELECT `login` FROM `users` WHERE `users`.`id` = `offers`.`user_id`) AS `login`, (SELECT `title` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `title`, (SELECT `user_id` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `article_user_id` FROM `offers` WHERE `offers`.`id` = ?", $temp)->fetch();		if($article['article_user_id'] == $this->user['id'])		{			$temp = array();			$temp[] = 1;			$temp[] = $id;			$this->db->query("UPDATE `offers` SET `status` = ? WHERE `id` = ?", $temp);			//$temp = array();			//$temp[] = $this->user['id'];			//$temp[] = $article['user_id'];			//$temp[] = '<strong>Системное сообщение: </strong>Вас выбрали исполнителем в проекте "<strong>'.$article['title'].'</strong>"';			//$temp[] = 1;			//$temp[] = '<strong>Системное сообщение: </strong>Вас выбрали исполнителем в проекте "<strong>'.$article['title'].'</strong>"';			//$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `message`, `is_system`, `back_message``) VALUES(?, ?, ?, ?, ?)", $temp);			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $article['user_id'];			$temp[] = $this->user['id'];			$temp[] = $article['user_id'];			$temp[] = $id;			$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();			$offer_id = $id;			if($m)			{				$conversation_id = $m['id'];				$offer_id = $m['offer_id'];			}			else			{				$temp = array();				$temp[] = $this->user['id'];				$temp[] = $article['user_id'];				$temp[] = $id;				$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);				$conversation_id = $this->db->insertId();			}			$temp = array();			$temp[] = $article['id'];			$temp[] = $conversation_id;			$this->db->query("INSERT INTO `offers_conversations` (`offer_id`, `conversation_id`) VALUES(?, ?)", $temp);			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $article['user_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong>						<p>Вас выбрали исполнителем в проекте "<strong>'.$article['title'].'</strong>"</p>						<form method="post" action="/agreeoffer">												<div class="form-group">							<a href="/agreeoffer/'.$article['id'].'" class="btn btn-success">Принять сделку</a>							<a href="/agreeoffer/'.$article['id'].'" name="agree" value="0" class="btn btn-danger">Отклонить сделку</a>						</div>						</form>';			$temp[] = 1;			$temp[] = '<strong>Системное сообщение: </strong>Вы выбрали исполнителя "<strong>'.$article['login'].'</strong>" для проекта "<strong>'.$article['title'].'</strong>" запрос на принятие сделки отправлен.';			$temp[] = $offer_id;			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `is_system`, `back_message`, `offer_id` ) VALUES(?, ?, ?, ?, ?, ?, ?)", $temp);			$this->session->setFlash('message', 'Вы успешно выбрали заявку');		}		$this->redirectBack();	}		public function agreeoffer($value) {				$data = array();		$value = intval($value);		$data['value'] = $value;		$temp = array();		$temp[] = $value;		$offer = $this->db->query("SELECT *,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title`, (SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_article_id` FROM `offers` WHERE `id` = ?", $temp)->fetch();		if($this->user['id'] != $offer['user_id'])		{			$this->session->setFlash('message', 'Вы не имеете прав подтверждать эту сделку');			return $this->redirectBack();		}		if($offer['agree'] == 1)		{			$this->session->setFlash('message', 'Вы уже подтвердили сделку');			return $this->redirectBack();		}		if($offer['agree'] == -1)		{			$this->session->setFlash('message', 'Вы уже отклонили сделку');			return $this->redirectBack();		}		$temp = array();		$temp[] = $offer['article_id'];		$data['article'] = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		return $this->view(__FUNCTION__, $data);			}		public function agreeoffer_post($value) {				$post = $this->input->post();		$value = intval($value);		$agree = intval($post['agree']);		$temp = array();		$temp[] = $value;		$offer = $this->db->query("SELECT *,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title`, (SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_article_id` FROM `offers` WHERE `id` = ?", $temp)->fetch();		if($this->user['id'] != $offer['user_id'])		{			$this->session->setFlash('message', 'Вы не имеете прав подтверждать эту сделку');			return $this->redirectBack();		}		$temp = array();		$temp[] = $agree;		$temp[] = $value;		$this->db->query("UPDATE `offers` SET `agree` = ? WHERE `id` = ? ", $temp);				$temp = array();		$temp[] = $offer['user_id'];		$temp[] = $offer['user_article_id'];		$temp[] = $offer['user_id'];		$temp[] = $offer['user_article_id'];		$temp[] = $value;		$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();		$offer_id = $value;		if($m)		{			$conversation_id = $m['id'];			$offer_id = $m['offer_id'];		}		else		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $id;			$temp[] = $offer_id;			$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);			$conversation_id = $this->db->insertId();		}		if($agree == 1)		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['user_article_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong>Исполнитель подтвердил сделку в проекте "<strong>'.$offer['title'].'</strong>",			далее вам нужно зарезервировать средства чтобы исполнитель начал работу						<form>							<div class="form-group">								<div style="margin-top: 10px;"><a class="btn btn-success reservation" href="/reservetation_cash/'.$value.'">Зарезервировать средства</a></div>							</div>						</form>			';			$temp[] = 1;			$temp[] = '<strong>Системное сообщение: </strong>Вы подтвердили сделку в проекте "<strong>'.$offer['title'].'</strong>" ожидайте пока заказчик пополнит счёт';			$temp[] = $offer_id;			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `is_system`, `back_message`, `offer_id`) VALUES(?, ?, ?, ?, ?, ?, ?)", $temp);			$this->session->setFlash('message', 'Вы успешно подтвердили сделку');		}		else		{			$temp = array();			$temp[] = $offer['id'];			$this->db->query("UPDATE `offers` SET `status` = -1, `agree` = -1, `result` = -1 WHERE `id` = ?", $temp);			$temp = array();			$temp[] = $this->user['id'];			$user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['user_article_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong>Исполнитель <a href="'.$this->baseUrl.'user/'.$user['login'].'">'.$user['login'].'</a> отклонил сделку в проекте "<strong>'.$offer['title'].'</strong>"';			$temp[] = 1;			$temp[] = '<strong>Системное сообщение: </strong>Вы отклонили сделку в проекте "<strong>'.$offer['title'].'</strong>"';			$temp[] = $offer_id;			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `is_system`, `back_message`, `offer_id`) VALUES(?, ?, ?, ?, ?, ?, ?)", $temp);			$this->session->setFlash('message', 'Вы успешно отклонили сделку');		}		return $this->redirect('/messages/'.$conversation_id);	}		public function reservetation($value)	{		$value = intval($value);		$temp = array();		$temp[] = $value;		$offer = $this->db->query("SELECT *,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title`, (SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id` FROM `offers` WHERE `id` = ?", $temp)->fetch();		$temp = array();		$temp[] = $offer['article_id'];		$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		if($article['user_id'] != $this->user['id'])		{			$this->session->setFlash('message', 'Вы не имеете прав резервировать средства на эту сделку');			return $this->redirectBack();					}		$data = array();		$temp = array();		$temp[] = $offer['id'];		$temp[] = $offer['article_id'];		$exists = $this->db->query("SELECT * FROM `payments` WHERE `offer_id` = ? AND `article_id` = ? AND `amount` > 0", $temp)->fetch();		if($exists)		{			$this->session->setFlash('message', 'Вы уже сделали резервацаю для данной сделки для этого проекта');			return $this->redirectBack();		}		$temp = array();		$temp[] = $offer['article_id'];		$data['article'] = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		$offer = $this->db->query("SELECT *,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title`, (SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id` FROM `offers` WHERE `id` = ?", $temp)->fetch();				return $this->view(__FUNCTION__, $data);					}		public function reservetation_post($value)	{		$post = $this->input->post();				if(!is_numeric($post['amount']) && $post['amount'] > 0)		{			$this->session->setFlash('message', 'Сумма должна быть больше 0');			return $this->redirectBack();					}		$value = intval($value);		$temp = array();		$temp[] = $value;		$offer = $this->db->query("SELECT *,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `id` = ?", $temp)->fetch();		$temp = array();		$temp[] = $offer['article_id'];		$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();		if($article['user_id'] != $this->user['id'])		{			$this->session->setFlash('message', 'Вы не имеете прав резервировать средства на эту сделку');			return $this->redirectBack();					}		$temp = array();		$temp[] = $offer['id'];		$temp[] = $article['id'];		$exists = $this->db->query("SELECT * FROM `payments` WHERE `offer_id` = ? AND `article_id` = ? AND `amount` > 0", $temp)->fetch();		if($exists)		{			$this->session->setFlash('message', 'Вы уже сделали резервацаю для данной сделки для этого проекта');			return $this->redirectBack();		}		$currency = \dvijok\core\Config::$currencies[$article['currency']];		$temp = array();		$temp[] = $post['amount'];		$temp[] = $offer['id'];		$temp[] = $offer['article_id'];		$temp[] = $this->user['id'];		$temp[] = 'reservation';		$this->db->query("INSERT INTO `payments`(`amount`, `offer_id`, `article_id`, `user_id`, `type`) VALUES(?, ?, ?, ?, ?)", $temp);		$id = $this->db->insertId();				$offer_id = $offer['id'];		if($id)		{			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['user_id'];			$temp[] = $this->user['id'];			$temp[] = $offer['user_id'];			$temp[] = $offer['id'];			$m = $this->db->query("SELECT * FROM `conversations` WHERE ((`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)) AND `offer_id` = ?", $temp)->fetch();			if($m)			{				$conversation_id = $m['id'];			}			else			{				$temp = array();				$temp[] = $this->user['id'];				$temp[] = $offer['user_id'];				$temp[] = $offer['id'];				$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`, `offer_id`) VALUES(?, ?, ?)", $temp);				$conversation_id = $this->db->insertId();			}			$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['user_id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong>Заказчик зарезервировал "<strong>'.$post['amount'].' '.$currency.'</strong>"			<p>можете приступать к работе</p>';			$temp[] = 1;			$temp[] = '<strong>Системное сообщение: </strong>Вы зарезервировали "<strong>'.$post['amount'].' '.$currency.'</strong>" в проекте "<strong>'.$offer['title'].'</strong>" исполнитель может приступать к работе';			$temp[] = $offer_id;			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `is_system`, `back_message`, `offer_id`) VALUES(?, ?, ?, ?, ?, ?, ?)", $temp);			$this->session->setFlash('message', 'Вы успешно зарезервировали средства');		}		else		{			$this->session->setFlash('message', 'средства небыли зарезервированы.');		}		return $this->redirect('/messages/'.$conversation_id);					}		public function history() {						$data = array();		$temp = array();		$temp[] = $this->user['id'];		$data['payments'] = $this->db->query("SELECT *, (SELECT `currency` FROM `articles` WHERE `id` = `payments`.`article_id`) AS `currency`, (SELECT `title` FROM `articles` WHERE `id` = `payments`.`article_id`) AS `title` FROM `payments` WHERE `user_id` = ?", $temp)->fetchAll();		return $this->view(__FUNCTION__, $data);					}		public function rejectselfoffer($id) {				$temp = array();		$temp[] = $id;		$offer = $this->db->query("SELECT *, (SELECT `user_id` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `article_user_id` FROM `offers` WHERE `offers`.`id` = ?", $temp)->fetch();		if($this->user['id'] == $offer['user_id'])		{			$temp = array();			$temp[] = -1;			$temp[] = $id;			$this->db->query("UPDATE `offers` SET `status` = ? WHERE `id` = ?", $temp);		}		$this->session->setFlash('message', 'Вы успешно отклонили свою заявку');		$this->redirectBack();	}		public function myoffers() {				$temp = array();		$temp[] = $this->user['id'];		$offers = $this->db->query("SELECT *, (SELECT `title` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `offers`.`user_id` = ?", $temp)->fetchAll();		$data = array();		$data['offers'] = $offers;		return $this->view(__FUNCTION__, $data);			}		public function myarticles() {				$temp = array();		$temp[] = $this->user['id'];		$data['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$this->user['id'].'/');		$articles = $this->db->query("SELECT * FROM `articles` WHERE `user_id` = ? ORDER BY `created_at` DESC", $temp)->fetchAll();				foreach($articles as &$a)				{					$a['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$a['user_id'].'/');									}						$data = array();		$data['articles'] = $articles;		return $this->view(__FUNCTION__, $data);			}		public function myprojects() {				$temp = array();		$temp[] = $this->user['id'];		$data = array();		$data['current_offers'] = $this->db->query("SELECT *, (SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id2`, (SELECT `login` FROM `users` WHERE `id` = `user_id2`) AS `login` ,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `user_id` = ? AND `result` = 0 AND `agree` = 1 AND `status` = 1 ORDER BY `created_at` DESC", $temp)->fetchAll();		return $this->view(__FUNCTION__, $data);			}		public function rejectoffer($id) {				$id = intval($id);		$temp = array();		$temp[] = $id;		$offer = $this->db->query("SELECT *, (SELECT `user_id` FROM `articles` WHERE `articles`.`id` = `offers`.`article_id`) AS `article_user_id` FROM `offers` WHERE `offers`.`id` = ?", $temp)->fetch();		if($offer['article_user_id'] == $this->user['id'])		{						$temp = array();			$temp[] = $offer['article_id'];			$article = $this->db->query("SELECT * FROM `articles` WHERE `id` = ?", $temp)->fetch();						$temp = array();			$temp[] = $this->user['id'];			$temp[] = $offer['user_id'];			$temp[] = $this->user['id'];			$temp[] = $offer['user_id'];			$m = $this->db->query("SELECT * FROM `conversations` WHERE (`from_id` = ? AND `to_id` = ?) OR (`to_id` = ? AND `from_id` = ?)", $temp)->fetch();			if($m)			{				$conversation_id = $m['id'];			}			else			{				$temp = array();				$temp[] = $this->user['id'];				$temp[] = $offer['user_id'];				$this->db->query("INSERT INTO `conversations`(`from_id`, `to_id`) VALUES(?, ?)", $temp);				$conversation_id = $this->db->insertId();			}			$temp = array();			$temp[] = -1;			$temp[] = $id;			$this->db->query("UPDATE `offers` SET `status` = ? WHERE `id` = ?", $temp);			$this->session->setFlash('message', 'Вы успешно отклонили заявку');			$temp = array();			$temp[] = $offer['user_id'];			$user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();			$temp = array();			$temp[] = $offer['user_id'];			$temp[] = $this->user['id'];			$temp[] = $conversation_id;			$temp[] = '<strong>Системное сообщение: </strong> Вы отклонили заявку пользователя <a href="'.$this->baseUrl.'user/'.$user['login'].'">'.$user['login'].'</a></p>';			$temp[] = 1;			$temp[] = '<strong>Системное сообщение: </strong>Ваша заявка в проекте <a href="/article/'.\dvijok\core\Helper::transliterate($article['title']).'-'.$article['id'].'">'.$article['title'].'</a> была отклонена';			$this->db->query("INSERT INTO `messages` (`from_id`, `to_id`, `conversation_id`, `message`, `is_system`, `back_message`) VALUES(?, ?, ?, ?, ?, ?)", $temp);		}						$this->redirectBack();			}	public function logout() {				$this->session->remove('user_id');		return $this->redirect('/');					}		public function register() {				$data = array();		$data['hide_button'] = isset($this->path['params']['hide_buttons']) ? 1 : 0;		return $this->view(__FUNCTION__, $data);	}		public function user($login = false) {				$data = array();		$user = false;		if($login)		{			$temp = array();			if(is_numeric($login))			{				$id = intval($login);				$temp[0] = $id;				$user = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();			}			else			{				$temp[0] = $login;				$user = $this->db->query("SELECT * FROM `users` WHERE `login` = ?", $temp)->fetch();			}		}		elseif($this->user)		{			$user = $this->user;		}		else		{			return $this->redirect('/');		}		//if(!$user)		//{		//	$user = $this->user;		//}		$temp = array();		$temp[] = $user['id'];		$data['user'] = $user;		$data['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$user['id'].'/');		$articles = $this->db->query("SELECT * FROM `articles` WHERE `user_id` = ? ORDER BY `created_at` DESC", $temp)->fetchAll();				foreach($articles as &$a)				{					$a['files'] = \dvijok\core\Helper::getFiles('./assets/uploads/users/'.$a['user_id'].'/');									}						$data['articles'] = $articles; 		$temp = array();		$temp[] = $user['id'];		$data['current_offers'] = $this->db->query("SELECT *, (SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id2`, (SELECT `login` FROM `users` WHERE `id` = `user_id2`) AS `login` ,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `user_id` = ? AND `result` = 0 AND `agree` = 1 AND `status` = 1 ORDER BY `created_at` DESC", $temp)->fetchAll();		$data['offers'] = $this->db->query("SELECT * ,(SELECT `user_id` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `user_id`,(SELECT `title` FROM `articles` WHERE `id` = `offers`.`article_id`) AS `title` FROM `offers` WHERE `user_id` = ? AND `result` != 0 AND `agree` = 1 AND `status` = 1 ORDER BY `created_at` DESC", $temp)->fetchAll();		//echo '<pre>';		//print_r($data['current_offers']);		//echo '</pre>';		//exit;		$rating_plus = 0;		$rating_minus = 0;		foreach($data['offers'] as &$of)		{			$temp = array();			$temp[] = $of['user_id'];			$of['user'] = $this->db->query("SELECT * FROM `users` WHERE `id` = ?", $temp)->fetch();						if($of['result'] > 0)			{				$rating_plus += $of['result'];			}			if($of['result'] < 0)			{				$rating_minus += $of['result'];				$of['result'] = $of['result'];			}		}		$data['rating_plus'] = $rating_plus;		$data['rating_minus'] = abs($rating_minus);				return $this->view(__FUNCTION__, $data);	}		public function additem() {				if(!$this->user)		{			return $this->redirect('/register');		}		$data = array();		$data['categories'] = $this->db->query("SELECT * FROM `categories`")->fetchAll();		return $this->view(__FUNCTION__, $data);	}		public function edititem($id) {				if(!$this->user)		{			return $this->redirect('/');		}		$id = intval($id);		$data = array();		$temp = array();		$temp[] = $id;		$temp[] = $this->user['id'];		$data['article'] = $this->db->query("SELECT * FROM `articles` WHERE `id` = ? AND `user_id` = ?", $temp)->fetch();		$data['categories'] = $this->db->query("SELECT * FROM `categories`")->fetchAll();		$path = './assets/uploads/articles/'.$id.'/';		$data['files'] = \dvijok\core\Helper::getFiles($path);		return $this->view(__FUNCTION__, $data);	}		public function edititem_post() {				$post = $this->input->post();		$validation = $this->validator->check($post, array(					'title' => 'required|minlength:3|maxlength:255',			'description' => 'required|minlength:50|maxlength: 100500',			'category_id' => 'required|integer',			'type' => 'required|in_values:s,p',			'pay_type' => 'required|integer',			'price' => 'required|number',			'currency' => 'required|integer',			'article_id' => 'required|integer'		), array(					'title' => array(							'required' => 'Укажите название',				'minlength' => 'Название слишком короткое (минимум 3 символа)',				'maxlength' => 'Название слишком длинное (максимум 255 символа)',			),			'description' => array(							'required' => 'Укажите описание',				'minlength' => 'Описание слишком короткое (минимум 50 символов)',				'maxlength' => 'Описание слишком длинное (максимум 1500 символа)',			),			'category_id' => array(							'required' => 'Укажите категорию',				'integer' => 'Неверное значение для категории'			),			'type' => array(							'required' => 'Укажите тип обьявления',				'in_values' => 'Неверное значение для тип обьявления'			),			'pay_type' => array(							'required' => 'Укажите тип оплаты',				'integer' => 'Неверное значение для тип оплаты'			),			'price' => array(							'required' => 'Повторите пароль',				'number' => 'Цена должна быть числовым значением'			),			'currency' => array(							'required' => 'Укажите валюту',				'integer' => 'Валюта значение для категории'			)		));		if($validation && $this->user)		{			$temp = array();			$temp[] = strip_tags($post['title']);			$temp[] = $post['description'];			$temp[] = $this->user['id'];			$temp[] = $post['category_id'];			$temp[] = $post['type'];			$temp[] = $post['pay_type'];			$temp[] = $post['price'];			$temp[] = $post['currency'];			$id = intval($post['article_id']);			$temp[] = $id;			$temp[] = $this->user['id'];			$this->db->query("UPDATE `articles` SET `title` = ?, `description` = ?, `user_id` = ?, `category_id` = ?, `type` = ?, `pay_type` = ?, `price` = ?, `currency` = ? WHERE `id` = ? AND `user_id` = ?", $temp);			\dvijok\core\Helper::uploadMultiple($_FILES, "./assets/uploads/articles/$id/", 'files');						$name = \dvijok\core\Helper::transliterate(strip_tags($post['title']).'-'.$id);			$this->redirect('/article/'.$name);		}		else		{			$this->redirectBack();		}	}		public function deleteitem($id) {						$id = intval($id);		$temp = array();		$temp[] = $id;		$offers = $this->db->query("SELECT * FROM `offers` WHERE `article_id` = ?", $temp)->fetchAll();		foreach($offers as $of)		{					if($of['status'] && $of['agree'])			{				//print_r(555);				//exit;				$this->session->setFlash('message', 'Вы неможете удалить это обьявление так как у вас есть подтверждённые сделки связанные с ним');				return $this->redirectBack();			}								}		$temp = array();		$temp[] = $id;		$temp[] = $this->user['id'];		$this->db->query("DELETE FROM `articles` WHERE id = ? AND `user_id` = ?", $temp);		\dvijok\core\Helper::clearFolder('./assets/uploads/articles/'.$id.'/', true);				$this->redirect('/user');	}		public function additem_post() {				$post = $this->input->post();		$validation = $this->validator->check($post, array(					'title' => 'required|minlength:3|maxlength:255',			'description' => 'required|minlength:50|maxlength: 100500',			'category_id' => 'required|integer',			'type' => 'required|in_values:s,p',			'pay_type' => 'required|integer',			'price' => 'required|number',			'currency' => 'required|integer',			'oferta' => 'required|equals:1'		), array(					'title' => array(							'required' => 'Укажите название',				'minlength' => 'Название слишком короткое (минимум 3 символа)',				'maxlength' => 'Название слишком длинное (максимум 255 символа)',			),			'description' => array(							'required' => 'Укажите описание',				'minlength' => 'Описание слишком короткое (минимум 50 символов)',				'maxlength' => 'Описание слишком длинное (максимум 1500 символа)',			),			'category_id' => array(							'required' => 'Укажите категорию',				'integer' => 'Неверное значение для категории'			),			'type' => array(							'required' => 'Укажите тип обьявления',				'in_values' => 'Неверное значение для тип обьявления'			),			'pay_type' => array(							'required' => 'Укажите тип оплаты',				'integer' => 'Неверное значение для тип оплаты'			),			'price' => array(							'required' => 'Повторите пароль',				'number' => 'Цена должна быть числовым значением'			),			'currency' => array(							'required' => 'Укажите валюту',				'integer' => 'Валюта значение для категории'			),			'oferta' => array(							'required' => 'Необходимо принять оферту',				'equals' => 'Неверное значение принятие оферты'			)		));		if($validation && $this->user)		{			$temp = array();			$temp[] = strip_tags($post['title']);			$temp[] = $post['description'];			$temp[] = $this->user['id'];			$temp[] = $post['category_id'];			$temp[] = $post['type'];			$temp[] = $post['pay_type'];			$temp[] = $post['price'];			$temp[] = $post['currency'];			$this->db->query("INSERT INTO `articles` (`title`, `description`, `user_id`, `category_id`, `type`, `pay_type`, `price`, `currency`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", $temp);			$id = $this->db->insertId();			\dvijok\core\Helper::uploadMultiple($_FILES, "./assets/uploads/articles/$id/", 'files');			$name = \dvijok\core\Helper::transliterate(strip_tags($post['title']).'-'.$id);			$this->redirect('/article/'.$name);		}		else		{			$this->redirectBack();		}	}		public function register_post() {						$post = $this->input->post();		$validation = $this->validator->check($post, array(					'login' => 'required|latin|unique:users,login|minlength:3|maxlength:255',			'email' => 'required|email|unique:users,email',			'phone' => 'required|unique:users,phone|maxlength:255|phoneformat',			'password' => 'required|minlength:5|maxlength:255|strongpass',			'password_re' => 'required|match:password',			'oferta' => 'required|equals:1'		), array(					'login' => array(							'required' => 'Укажите логин',				'minlength' => 'Логин слишком короткий (минимум 3 символа)',				'maxlength' => 'Логин слишком длинный',				'unique' => 'Такой логин уже существует',				'latin' => 'Логин должен состоять только из латинских букв'			),			'email' => array(							'required' => 'Укажите E-mail',				'unique' => 'Такой E-mail уже существует',				'email' => 'E-mail имеет неверный формат',			),			'phone' => array(							'required' => 'Укажите телефон',				'unique' => 'Такой телефон уже существует',				'maxlength' => 'Поле телефон слишком длинный',				'number' => 'Телефон должен быть цифрой',				'phoneformat' => 'Телефон имеет неверный формат'			),			'password' => array(							'required' => 'Укажите пароль',				'minlength' => 'Пароль слишком короткий (минимум 5 символов)',				'maxlength' => 'Пароль слишком длинный',				'strongpass' => 'Ваш пароль должен содержать 1 символ верхнего регистра, 1 цифру и 1 специальный символ'			),			'password_re' => array(							'required' => 'Повторите пароль',				'match' => 'Пароли не совпадают'			),			'oferta' => array(							'required' => 'Необходимо принять оферту',				'equals' => 'Неверное значение принятие оферты'			)		));		if($validation)		{			$temp = array();			$temp[] = $post['login'];			$temp[] = $post['email'];			$temp[] = $post['phone'];			$temp[] = password_hash($post['password'], PASSWORD_DEFAULT);			$temp[] = 1;			$this->db->query("INSERT INTO `users` (`login`, `email`, `phone`, `password`, `type`) VALUES(?, ? , ?, ? , ?)", $temp);			$this->session->setFlash('register_success', 1);			$this->session->setFlash('register_success_email', $post['email']);			$this->redirect('register_success');		}		else		{			$this->redirectBack();		}	}		public function register_success() {				$data = array();		return $this->view(__FUNCTION__, $data);	}}